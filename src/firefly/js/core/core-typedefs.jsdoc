/**
 * @global
 */


/**
 * Version information
 * @typedef {Object} VersionInfo
 * @prop {string} BuildMajor    major version number
 * @prop {string} BuildMinor    minor version number
 * @prop {string} BuildRev      revision version number
 * @prop {string} BuildType     one of Final, Development, Alpha, Beta, or RC
 * @prop {string} BuildNumber   build version number
 * @prop {string} BuildDate     built date
 * @prop {string} BuildTime     built date including time
 * @prop {string} BuildTag      vcs tag string if it were tagged
 * @prop {string} BuildCommit   vcs commit used to build this app
 * @prop {string} BuildCommitFirefly    Firefly's vcs commit used to build this app.
 * @prop {string} BuildFireflyTag firefly tag used for this build
 * @prop {string} BuildFireflyBranch firefly branch used for this build
 * @prop {string} DevCycle the tag that marks this development cycle
 */

/**
 * Information related to searches
 * @typedef {Object} SearchInfo
 * @prop {string} [title]           main title if any.  It will appears on top.
 * @prop {string} [flow]            'horizontal', 'vertical', or 'hidden'.  defaults to 'vertical'.
 * @prop {string} activeSearch      currently selected search.
 * @prop {boolean} renderAsMenuItems convert SearchInfo into MenuItems.  Defaults to false.  When this is true, flow is default to 'hidden', unless defined.
 * @prop {Object.<string,Search>}   allSearchItems  flatten maps of searches keyed by name
 * @prop {SearchGroup[]}            groups   search group
 */

/**
 * Search group information.
 * @typedef {object} SearchGroup
 * @prop {string} title search if any
 * @prop {Object.<string,Search>} searchItems   searches keyed by name
 */

/**
 * Search information.
 * @typedef {object} Search
 * @prop {string} name  name of the search
 * @prop {string} title title of the search
 * @prop {string} desc  desc of the search
 * @prop {SearchForm} form  define form info
 * @prop {function} renderStandardView    a function to render the search results in standard mode.
 * @prop {function} [renderExpandedView]  a function to render the search results in expanded mode
 * @prop {function} download    a function that returns the download dialog.
 * @prop {bool} primary         used by MenItem; defaults to false
 * @prop {string} path          used by routed-app for navigation
 */

/**
 * Search information.
 * @typedef {object} SearchForm
 * @prop {function} render     a function that returns the search form.
 * @prop {string|func} action  a predefined function mapped by this string or a function to perform the form submission. Invoked with request passed in.
 * @prop {object} params  additional parameters added to the request before action is invoked.
 * @prop {string|function} title description of the search results.  if a function, the request will be passed in. 
 * @prop {string} [helpId] help ID if available
 */

/**
 * MenuItem information.
 * @typedef {object} MenuItem
 * @prop {string} action    action to trigger for the given menu item
 * @prop {string} label     text on the button
 * @prop {string} title     tooltips
 * @prop {string} category  category/group of the given menu item
 * @prop {bool} primary     shown as tab on init; defaults to false
 * @prop {bool} landing     whether the app starts with this tab; defaults to false
 * @prop {string} path      used by routed-app for navigation
 * @prop {bool} visible     shown on tab menu
 */

/**
 * Common Layout information used to control generic behavior, ie drop-down panel, expanded/collapsed state, etc
 * The intention here is to allow additional layout attributes to be added to handle specific layout needs of a
 * particular component or application.  Use dispatchUpdateLayoutInfo to update this object.
 * @typedef {Object} LayoutInfo
 * @prop {Object}   dropDown    information used by the drop-down menu component
 * @prop {boolean}  dropDown.visible    true to show the drop-down panel;  collapse the panel otherwise
 * @prop {string}   dropDown.view       the selected menuItem to be shown.
 * @prop {Object}   mode        information used to control expanded or standard mode.
 *                              In this context, view a string to denote what to show, ie.  'tables', 'images', or 'tables | images' ( tables and images).
 * @prop {string}   mode.expanded   if not nil/empty, show this view in expanded mode
 * @prop {string}   mode.standard   the current standard view.
 * @prop {boolean}  showForm    show form panel
 * @prop {boolean}  showTables  show tables panel
 * @prop {boolean}  showXyPlots show charts panel
 * @prop {boolean}  showImages  show images panel
 * @prop {boolean}  initLoadCompleted true when anything as been loaded once
 * @prop {Object.<string, GridViewData>} gridViewsData used only with the grid view, undefined for other views
 */


/**
 *
 * @typedef {Object} GridViewData
 * @prop {Array.<GridViewEntry>} gridView used only with the grid view, undefined for other views
 * @prop {number} gridColumns number of columns in this grid View
 */


/**
 * Entry for grid layout. These entries are stored in an array by LayoutCntlr
 * @typedef {Object} GridViewEntry
 * @prop {LO_VIEW} type
 * @prop {string} cellId
 * @prop {number} row
 * @prop {number} col
 * @prop {number} width
 * @prop {number} height
 */


/*=================  Background jobs state  =============================*/ 

/**
 * Top-level.  Information on background jobs. Object is keyed by ID.
 * @typedef {Object} BackgroundInfo
 * @prop {string} email                     email to notify when background job is completed
 * @prop {boolean} enableEmail              true to send email notification when job is done
 * @prop {string} showDlScript              show download script link
 * @prop {Object.<string, JobInfo>} jobs    a map of background job and its jobInfo.
 */

/**
 * Background jobInfo of one job.
 * @typedef {Object} JobInfo
 * @prop {string} jobId         unique identifier for this job
 * @prop {string} ownerId       ID of the job creator
 * @prop {string} phase         execution phase.  One of PENDING, QUEUED, EXECUTING, COMPLETED, ERROR, ABORTED
 * @prop {string} startTime     start time in UTC
 * @prop {string} endTime       end time in UTC
 * @prop {number} executionDuration duration (in seconds) the job is allowed to run. 0 means unlimited
 * @prop {string} destruction   the time at which the whole job + records + results will be destroyed
 * @prop {string} parameters    the parameters to the job
 * @prop {string[]} results     the results for the job - can also be retrieved at /{jobs}/{job-id}/results
 * @prop {string} type          type of job. One of SEARCH, PACKAGE
 * @prop {boolean} monitored    true if UI is monitoring the job
 * @prop {number} progress      progress of the job as a percentage.  0-100, where 100 is done
 * @prop {string} progressDesc  a description of the current progress
 * @prop {string} error         error message if there's an error
 */

/*=========================================================================*/
