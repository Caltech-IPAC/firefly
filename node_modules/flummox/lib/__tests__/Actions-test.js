"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _Flux = require("../Flux");

var Flux = _Flux.Flux;
var Actions = _Flux.Actions;
var sinon = _interopRequire(require("sinon"));

describe("Actions", function () {
  var TestActions = (function (Actions) {
    function TestActions() {
      _classCallCheck(this, TestActions);

      if (Actions != null) {
        Actions.apply(this, arguments);
      }
    }

    _inherits(TestActions, Actions);

    _prototypeProperties(TestActions, null, {
      getFoo: {
        value: function getFoo() {
          return { foo: "bar" };
        },
        writable: true,
        configurable: true
      },
      getBar: {
        value: function getBar() {
          return { bar: "baz" };
        },
        writable: true,
        configurable: true
      },
      getBaz: {
        value: function getBaz() {
          return;
        },
        writable: true,
        configurable: true
      },
      asyncAction: {
        value: function asyncAction(returnValue) {
          return regeneratorRuntime.async(function asyncAction$(context$3$0) {
            while (1) switch (context$3$0.prev = context$3$0.next) {
              case 0:
                return context$3$0.abrupt("return", returnValue);
              case 1:
              case "end":
                return context$3$0.stop();
            }
          }, null, this);
        },
        writable: true,
        configurable: true
      },
      badAsyncAction: {
        value: function badAsyncAction() {
          return Promise.reject(new Error("some error"));
        },
        writable: true,
        configurable: true
      }
    });

    return TestActions;
  })(Actions);

  describe("#getActionIds / #getConstants", function () {
    it("returns strings corresponding to action method names", function () {
      var actions = new TestActions();

      var actionIds = actions.getActionIds();

      expect(actionIds.getFoo).to.be.a("string");
      expect(actionIds.getBar).to.be.a("string");

      expect(actionIds.getFoo).to.be.a("string");
      expect(actionIds.getBar).to.be.a("string");
    });
  });

  describe("#[methodName]", function () {
    it("calls Flux dispatcher", function () {
      var actions = new TestActions();

      // Attach mock flux instance
      var dispatch = sinon.spy();
      actions.dispatch = dispatch;

      actions.getFoo();
      expect(dispatch.firstCall.args[1]).to.deep.equal({ foo: "bar" });
    });

    it("warns if actions have not been added to a Flux instance", function () {
      var actions = new TestActions();
      var warn = sinon.spy(console, "warn");

      actions.getFoo();

      expect(warn.firstCall.args[0]).to.equal("You've attempted to perform the action TestActions#getFoo, but it " + "hasn't been added to a Flux instance.");

      actions.asyncAction();

      expect(warn.secondCall.args[0]).to.equal("You've attempted to perform the asynchronous action " + "TestActions#asyncAction, but it hasn't been added " + "to a Flux instance.");

      console.warn.restore();
    });

    it("sends return value to Flux dispatch", function () {
      var actions = new TestActions();
      var actionId = actions.getActionIds().getFoo;
      var dispatch = sinon.spy();
      actions.dispatch = dispatch;

      actions.getFoo();

      expect(dispatch.firstCall.args[0]).to.equal(actionId);
      expect(dispatch.firstCall.args[1]).to.deep.equal({ foo: "bar" });
    });

    it("send async return value to Flux#dispatchAsync", function callee$2$0() {
      var actions, actionId, dispatch, response;
      return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            actions = new TestActions();
            actionId = actions.getActionIds().asyncAction;
            dispatch = sinon.stub().returns(Promise.resolve());
            actions.dispatchAsync = dispatch;

            response = actions.asyncAction("foobar");


            expect(response.then).to.be.a("function");

            context$3$0.next = 8;
            return response;
          case 8:


            expect(dispatch.firstCall.args[0]).to.equal(actionId);
            expect(dispatch.firstCall.args[1]).to.be.an.instanceOf(Promise);
          case 10:
          case "end":
            return context$3$0.stop();
        }
      }, null, this);
    });

    it("skips disptach if return value is undefined", function () {
      var actions = new TestActions();
      var dispatch = sinon.spy();
      actions.dispatch = dispatch;

      actions.getBaz();

      expect(dispatch.called).to.be["false"];
    });

    it("does not skip async dispatch, even if resolved value is undefined", function () {
      var actions = new TestActions();
      var dispatch = sinon.spy();
      actions.dispatchAsync = dispatch;

      actions.asyncAction(undefined);

      expect(dispatch.called).to.be["true"];
    });

    it("returns value from wrapped action", function callee$2$1() {
      var flux, actions;
      return regeneratorRuntime.async(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            flux = new Flux();
            actions = flux.createActions("test", TestActions);


            expect(actions.getFoo()).to.deep.equal({ foo: "bar" });
            context$3$0.next = 5;
            return expect(actions.asyncAction("async result")).to.eventually.equal("async result");
          case 5:
          case "end":
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vQWN0aW9ucy10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBQThCLFNBQVM7O0lBQTlCLElBQUksU0FBSixJQUFJO0lBQUUsT0FBTyxTQUFQLE9BQU87SUFDZixLQUFLLDJCQUFNLE9BQU87O0FBRXpCLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBTTtNQUVsQixXQUFXLGNBQVMsT0FBTzthQUEzQixXQUFXOzRCQUFYLFdBQVc7O1VBQVMsT0FBTztBQUFQLGVBQU87Ozs7Y0FBM0IsV0FBVyxFQUFTLE9BQU87O3lCQUEzQixXQUFXO0FBQ2YsWUFBTTtlQUFBLGtCQUFHO0FBQ1AsaUJBQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDdkI7Ozs7QUFFRCxZQUFNO2VBQUEsa0JBQUc7QUFDUCxpQkFBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztTQUN2Qjs7OztBQUVELFlBQU07ZUFBQSxrQkFBRztBQUNQLGlCQUFPO1NBQ1I7Ozs7QUFFSyxpQkFBVztlQUFBLHFCQUFDLFdBQVc7Ozs7b0RBQ3BCLFdBQVc7Ozs7OztTQUNuQjs7OztBQUVELG9CQUFjO2VBQUEsMEJBQUc7QUFDZixpQkFBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDaEQ7Ozs7OztXQW5CRyxXQUFXO0tBQVMsT0FBTzs7QUFzQmpDLFVBQVEsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0FBQzlDLE1BQUUsQ0FBQyxzREFBc0QsRUFBRSxZQUFNO0FBQy9ELFVBQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7O0FBRWxDLFVBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7QUFFekMsWUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMs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O0FBQzdCLGFBQU8sQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDOztBQUVqQyxhQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUvQixZQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQUssQ0FBQztLQUNwQyxDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLG1DQUFtQyxFQUFFO1VBQ2hDLElBQUksRUFDSixPQUFPOzs7O0FBRFAsZ0JBQUksR0FBRyxJQUFJLElBQUksRUFBRTtBQUNqQixtQkFBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQzs7O0FBRXZELGtCQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzs7bUJBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQzlDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7Ozs7O0tBQ3ZDLENBQUMsQ0FBQztHQUVKLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJzcmMvX190ZXN0c19fL0FjdGlvbnMtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsdXgsIEFjdGlvbnMgfSBmcm9tICcuLi9GbHV4JztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5cbmRlc2NyaWJlKCdBY3Rpb25zJywgKCkgPT4ge1xuXG4gIGNsYXNzIFRlc3RBY3Rpb25zIGV4dGVuZHMgQWN0aW9ucyB7XG4gICAgZ2V0Rm9vKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAnYmFyJyB9O1xuICAgIH1cblxuICAgIGdldEJhcigpIHtcbiAgICAgIHJldHVybiB7IGJhcjogJ2JheicgfTtcbiAgICB9XG5cbiAgICBnZXRCYXooKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXN5bmMgYXN5bmNBY3Rpb24ocmV0dXJuVmFsdWUpIHtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9XG5cbiAgICBiYWRBc3luY0FjdGlvbigpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3NvbWUgZXJyb3InKSk7XG4gICAgfVxuICB9XG5cbiAgZGVzY3JpYmUoJyNnZXRBY3Rpb25JZHMgLyAjZ2V0Q29uc3RhbnRzJywgKCkgPT4ge1xuICAgIGl0KCdyZXR1cm5zIHN0cmluZ3MgY29ycmVzcG9uZGluZyB0byBhY3Rpb24gbWV0aG9kIG5hbWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9ucyA9IG5ldyBUZXN0QWN0aW9ucygpO1xuXG4gICAgICBjb25zdCBhY3Rpb25JZHMgPSBhY3Rpb25zLmdldEFjdGlvbklkcygpO1xuXG4gICAgICBleHBlY3QoYWN0aW9uSWRzLmdldEZvbykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICBleHBlY3QoYWN0aW9uSWRzLmdldEJhcikudG8uYmUuYSgnc3RyaW5nJyk7XG5cbiAgICAgIGV4cGVjdChhY3Rpb25JZHMuZ2V0Rm9vKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdChhY3Rpb25JZHMuZ2V0QmFyKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZSgnI1ttZXRob2ROYW1lXScsICgpID0+IHtcbiAgICBpdCgnY2FsbHMgRmx1eCBkaXNwYXRjaGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9ucyA9IG5ldyBUZXN0QWN0aW9ucygpO1xuXG4gICAgICAvLyBBdHRhY2ggbW9jayBmbHV4IGluc3RhbmNlXG4gICAgICBjb25zdCBkaXNwYXRjaCA9IHNpbm9uLnNweSgpO1xuICAgICAgYWN0aW9ucy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuXG4gICAgICBhY3Rpb25zLmdldEZvbygpO1xuICAgICAgZXhwZWN0KGRpc3BhdGNoLmZpcnN0Q2FsbC5hcmdzWzFdKS50by5kZWVwLmVxdWFsKHsgZm9vOiAnYmFyJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCd3YXJucyBpZiBhY3Rpb25zIGhhdmUgbm90IGJlZW4gYWRkZWQgdG8gYSBGbHV4IGluc3RhbmNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9ucyA9IG5ldyBUZXN0QWN0aW9ucygpO1xuICAgICAgY29uc3Qgd2FybiA9IHNpbm9uLnNweShjb25zb2xlLCAnd2FybicpO1xuXG4gICAgICBhY3Rpb25zLmdldEZvbygpO1xuXG4gICAgICBleHBlY3Qod2Fybi5maXJzdENhbGwuYXJnc1swXSkudG8uZXF1YWwoXG4gICAgICAgICdZb3VcXCd2ZSBhdHRlbXB0ZWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIFRlc3RBY3Rpb25zI2dldEZvbywgYnV0IGl0ICdcbiAgICAgICsgJ2hhc25cXCd0IGJlZW4gYWRkZWQgdG8gYSBGbHV4IGluc3RhbmNlLidcbiAgICAgICk7XG5cbiAgICAgIGFjdGlvbnMuYXN5bmNBY3Rpb24oKTtcblxuICAgICAgZXhwZWN0KHdhcm4uc2Vjb25kQ2FsbC5hcmdzWzBdKS50by5lcXVhbChcbiAgICAgICAgYFlvdSd2ZSBhdHRlbXB0ZWQgdG8gcGVyZm9ybSB0aGUgYXN5bmNocm9ub3VzIGFjdGlvbiBgXG4gICAgICArIGBUZXN0QWN0aW9ucyNhc3luY0FjdGlvbiwgYnV0IGl0IGhhc24ndCBiZWVuIGFkZGVkIGBcbiAgICAgICsgYHRvIGEgRmx1eCBpbnN0YW5jZS5gXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlLndhcm4ucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3NlbmRzIHJldHVybiB2YWx1ZSB0byBGbHV4IGRpc3BhdGNoJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9ucyA9IG5ldyBUZXN0QWN0aW9ucygpO1xuICAgICAgY29uc3QgYWN0aW9uSWQgPSBhY3Rpb25zLmdldEFjdGlvbklkcygpLmdldEZvbztcbiAgICAgIGNvbnN0IGRpc3BhdGNoID0gc2lub24uc3B5KCk7XG4gICAgICBhY3Rpb25zLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG5cbiAgICAgIGFjdGlvbnMuZ2V0Rm9vKCk7XG5cbiAgICAgIGV4cGVjdChkaXNwYXRjaC5maXJzdENhbGwuYXJnc1swXSkudG8uZXF1YWwoYWN0aW9uSWQpO1xuICAgICAgZXhwZWN0KGRpc3BhdGNoLmZpcnN0Q2FsbC5hcmdzWzFdKS50by5kZWVwLmVxdWFsKHsgZm9vOiAnYmFyJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzZW5kIGFzeW5jIHJldHVybiB2YWx1ZSB0byBGbHV4I2Rpc3BhdGNoQXN5bmMnLCBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGFjdGlvbnMgPSBuZXcgVGVzdEFjdGlvbnMoKTtcbiAgICAgIGNvbnN0IGFjdGlvbklkID0gYWN0aW9ucy5nZXRBY3Rpb25JZHMoKS5hc3luY0FjdGlvbjtcbiAgICAgIGNvbnN0IGRpc3BhdGNoID0gc2lub24uc3R1YigpLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYWN0aW9ucy5kaXNwYXRjaEFzeW5jID0gZGlzcGF0Y2g7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYWN0aW9ucy5hc3luY0FjdGlvbignZm9vYmFyJyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS50aGVuKS50by5iZS5hKCdmdW5jdGlvbicpO1xuXG4gICAgICBhd2FpdCByZXNwb25zZTtcblxuICAgICAgZXhwZWN0KGRpc3BhdGNoLmZpcnN0Q2FsbC5hcmdzWzBdKS50by5lcXVhbChhY3Rpb25JZCk7XG4gICAgICBleHBlY3QoZGlzcGF0Y2guZmlyc3RDYWxsLmFyZ3NbMV0pLnRvLmJlLmFuLmluc3RhbmNlT2YoUHJvbWlzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2tpcHMgZGlzcHRhY2ggaWYgcmV0dXJuIHZhbHVlIGlzIHVuZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbnMgPSBuZXcgVGVzdEFjdGlvbnMoKTtcbiAgICAgIGNvbnN0IGRpc3BhdGNoID0gc2lub24uc3B5KCk7XG4gICAgICBhY3Rpb25zLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG5cbiAgICAgIGFjdGlvbnMuZ2V0QmF6KCk7XG5cbiAgICAgIGV4cGVjdChkaXNwYXRjaC5jYWxsZWQpLnRvLmJlLmZhbHNlO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvZXMgbm90IHNraXAgYXN5bmMgZGlzcGF0Y2gsIGV2ZW4gaWYgcmVzb2x2ZWQgdmFsdWUgaXMgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9ucyA9IG5ldyBUZXN0QWN0aW9ucygpO1xuICAgICAgY29uc3QgZGlzcGF0Y2ggPSBzaW5vbi5zcHkoKTtcbiAgICAgIGFjdGlvbnMuZGlzcGF0Y2hBc3luYyA9IGRpc3BhdGNoO1xuXG4gICAgICBhY3Rpb25zLmFzeW5jQWN0aW9uKHVuZGVmaW5lZCk7XG5cbiAgICAgIGV4cGVjdChkaXNwYXRjaC5jYWxsZWQpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyB2YWx1ZSBmcm9tIHdyYXBwZWQgYWN0aW9uJywgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcbiAgICAgIGNvbnN0IGFjdGlvbnMgPSBmbHV4LmNyZWF0ZUFjdGlvbnMoJ3Rlc3QnLCBUZXN0QWN0aW9ucyk7XG5cbiAgICAgIGV4cGVjdChhY3Rpb25zLmdldEZvbygpKS50by5kZWVwLmVxdWFsKHsgZm9vOiAnYmFyJyB9KTtcbiAgICAgIGF3YWl0IGV4cGVjdChhY3Rpb25zLmFzeW5jQWN0aW9uKCdhc3luYyByZXN1bHQnKSlcbiAgICAgICAgLnRvLmV2ZW50dWFsbHkuZXF1YWwoJ2FzeW5jIHJlc3VsdCcpO1xuICAgIH0pO1xuXG4gIH0pO1xuXG59KTtcbiJdfQ==