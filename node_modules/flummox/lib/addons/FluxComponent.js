"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * Flux Component
 *
 * Component form of fluxMixin. Uses fluxMixin as part of its implementation,
 * so requires a flux instance to be provided as either context or a prop.
 *
 * Like fluxMixin, children are given access to the flux instance via
 * `context.flux`. Use this near the top of your app hierarchy and all children
 * will have easy access to the flux instance (including, of course, other
 * Flux components!):
 *
 * <FluxComponent flux={flux}>
 *    ...the rest of your app
 * </FluxComponent>
 *
 * Now any child can access the flux instance again like this:
 *
 * <FluxComponent>
 *    ...children
 * </FluxComponent>
 *
 * We don't need the flux prop this time because flux is already part of
 * the context.
 *
 * Additionally, immediate children are given a `flux` prop.
 *
 * The component has an optional prop `connectToStores`, which is -- you guessed
 * it -- passed directly to fluxMixin's `connectToStores()` function and
 * set as the initial state. The component's state is injected as props to
 * child components.
 *
 * The practical upshot of all this is that fluxMixin, state changes, and
 * context are now simply implementation details. Among other things, this means
 * you can write your components as plain ES6 classes. Here's an example:
 *
 * class ParentComponent extends React.Component {
 *
 *   render() {
 *     <FluxComponent connectToStore="fooStore">
 *       <ChildComponent />
 *     </FluxComponent>
 *   }
 *
 * }
 *
 * ChildComponent in this example has prop `flux` containing the flux instance,
 * and props that sync with each of the state keys of fooStore.
 */

var React = _interopRequire(require("react"));

var _reactComponentMethods = require("./reactComponentMethods");

var instanceMethods = _reactComponentMethods.instanceMethods;
var staticProperties = _reactComponentMethods.staticProperties;
var assign = _interopRequire(require("object-assign"));

var FluxComponent = (function (_React$Component) {
  function FluxComponent(props, context) {
    _classCallCheck(this, FluxComponent);

    _get(Object.getPrototypeOf(FluxComponent.prototype), "constructor", this).call(this, props, context);

    this.initialize();

    this.state = this.connectToStores(props.connectToStores);

    this.wrapChild = this.wrapChild.bind(this);
  }

  _inherits(FluxComponent, _React$Component);

  _prototypeProperties(FluxComponent, null, {
    wrapChild: {
      value: function wrapChild(child) {
        var _props = this.props;
        var children = _props.children;
        var connectToStores = _props.connectToStores;
        var extraProps = _objectWithoutProperties(_props, ["children", "connectToStores"]);

        return React.cloneElement(child, this.getChildProps());
      },
      writable: true,
      configurable: true
    },
    getChildProps: {
      value: function getChildProps() {
        var _props = this.props;
        var children = _props.children;
        var render = _props.render;
        var extraProps = _objectWithoutProperties(_props, ["children", "render"]);

        return assign({ flux: this.getFlux() }, this.state, extraProps);
      },
      writable: true,
      configurable: true
    },
    render: {
      value: function render() {
        var _props = this.props;
        var children = _props.children;
        var render = _props.render;
        var extraProps = _objectWithoutProperties(_props, ["children", "render"]);

        if (typeof render === "function") {
          return render(this.getChildProps());
        }if (!children) {
          return null;
        }if (!Array.isArray(children)) {
          var child = children;
          return this.wrapChild(child);
        } else {
          return React.createElement(
            "span",
            null,
            React.Children.map(children, this.wrapChild)
          );
        }
      },
      writable: true,
      configurable: true
    }
  });

  return FluxComponent;
})(React.Component);

assign(FluxComponent.prototype, instanceMethods);

assign(FluxComponent, staticProperties);

module.exports = FluxComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRvbnMvRmx1eENvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFpRE8sS0FBSywyQkFBTSxPQUFPOztxQ0FDeUIseUJBQXlCOztJQUFsRSxlQUFlLDBCQUFmLGVBQWU7SUFBRSxnQkFBZ0IsMEJBQWhCLGdCQUFnQjtJQUNuQyxNQUFNLDJCQUFNLGVBQWU7O0lBRTVCLGFBQWE7QUFDTixXQURQLGFBQWEsQ0FDTCxLQUFLLEVBQUUsT0FBTzswQkFEdEIsYUFBYTs7QUFFZiwrQkFGRSxhQUFhLDZDQUVULEtBQUssRUFBRSxPQUFPLEVBQUU7O0FBRXRCLFFBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7QUFFbEIsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQzs7QUFFekQsUUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM1Qzs7WUFURyxhQUFhOzt1QkFBYixhQUFhO0FBV2pCLGFBQVM7YUFBQSxtQkFBQyxLQUFLLEVBQUU7cUJBQ3NDLElBQUksQ0FBQyxLQUFLO1lBQXZELFFBQVEsVUFBUixRQUFRO1lBQUUsZUFBZSxVQUFmLGVBQWU7WUFBSyxVQUFVOztBQUVoRCxlQUFPLEtBQUssQ0FBQyxZQUFZLENBQ3ZCLEtBQUssRUFDTCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQ3JCLENBQUM7T0FDSDs7OztBQUVELGlCQUFhO2FBQUEseUJBQUc7cUJBQzhCLElBQUksQ0FBQyxLQUFLO1lBQTlDLFFBQVEsVUFBUixRQUFRO1lBQUUsTUFBTSxVQUFOLE1BQU07WUFBSyxVQUFVOztBQUV2QyxlQUFPLE1BQU0sQ0FDWCxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFDeEIsSUFBSSxDQUFDLEtBQUssRUFDVixVQUFVLENBQ1gsQ0FBQztPQUNIOzs7O0FBRUQsVUFBTTthQUFBLGtCQUFHO3FCQUNxQyxJQUFJLENBQUMsS0FBSztZQUE5QyxRQUFRLFVBQVIsUUFBUTtZQUFFLE1BQU0sVUFBTixNQUFNO1lBQUssVUFBVTs7QUFFdkMsWUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVO0FBQUUsaUJBQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1NBQUEsQUFFdEUsSUFBSSxDQUFDLFFBQVE7QUFBRSxpQkFBTyxJQUFJLENBQUM7U0FBQSxBQUUzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM1QixjQUFNLEtBQUssR0FBRyxRQUFRLENBQUM7QUFDdkIsaUJBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QixNQUFNO0FBQ0wsaUJBQU87OztZQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1dBQVEsQ0FBQztTQUNwRTtPQUNGOzs7Ozs7U0EzQ0csYUFBYTtHQUFTLEtBQUssQ0FBQyxTQUFTOztBQThDM0MsTUFBTSxDQUNKLGFBQWEsQ0FBQyxTQUFTLEVBQ3ZCLGVBQWUsQ0FDaEIsQ0FBQzs7QUFFRixNQUFNLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7O2lCQUV6QixhQUFhIiwiZmlsZSI6InNyYy9hZGRvbnMvRmx1eENvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmx1eCBDb21wb25lbnRcbiAqXG4gKiBDb21wb25lbnQgZm9ybSBvZiBmbHV4TWl4aW4uIFVzZXMgZmx1eE1peGluIGFzIHBhcnQgb2YgaXRzIGltcGxlbWVudGF0aW9uLFxuICogc28gcmVxdWlyZXMgYSBmbHV4IGluc3RhbmNlIHRvIGJlIHByb3ZpZGVkIGFzIGVpdGhlciBjb250ZXh0IG9yIGEgcHJvcC5cbiAqXG4gKiBMaWtlIGZsdXhNaXhpbiwgY2hpbGRyZW4gYXJlIGdpdmVuIGFjY2VzcyB0byB0aGUgZmx1eCBpbnN0YW5jZSB2aWFcbiAqIGBjb250ZXh0LmZsdXhgLiBVc2UgdGhpcyBuZWFyIHRoZSB0b3Agb2YgeW91ciBhcHAgaGllcmFyY2h5IGFuZCBhbGwgY2hpbGRyZW5cbiAqIHdpbGwgaGF2ZSBlYXN5IGFjY2VzcyB0byB0aGUgZmx1eCBpbnN0YW5jZSAoaW5jbHVkaW5nLCBvZiBjb3Vyc2UsIG90aGVyXG4gKiBGbHV4IGNvbXBvbmVudHMhKTpcbiAqXG4gKiA8Rmx1eENvbXBvbmVudCBmbHV4PXtmbHV4fT5cbiAqICAgIC4uLnRoZSByZXN0IG9mIHlvdXIgYXBwXG4gKiA8L0ZsdXhDb21wb25lbnQ+XG4gKlxuICogTm93IGFueSBjaGlsZCBjYW4gYWNjZXNzIHRoZSBmbHV4IGluc3RhbmNlIGFnYWluIGxpa2UgdGhpczpcbiAqXG4gKiA8Rmx1eENvbXBvbmVudD5cbiAqICAgIC4uLmNoaWxkcmVuXG4gKiA8L0ZsdXhDb21wb25lbnQ+XG4gKlxuICogV2UgZG9uJ3QgbmVlZCB0aGUgZmx1eCBwcm9wIHRoaXMgdGltZSBiZWNhdXNlIGZsdXggaXMgYWxyZWFkeSBwYXJ0IG9mXG4gKiB0aGUgY29udGV4dC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGltbWVkaWF0ZSBjaGlsZHJlbiBhcmUgZ2l2ZW4gYSBgZmx1eGAgcHJvcC5cbiAqXG4gKiBUaGUgY29tcG9uZW50IGhhcyBhbiBvcHRpb25hbCBwcm9wIGBjb25uZWN0VG9TdG9yZXNgLCB3aGljaCBpcyAtLSB5b3UgZ3Vlc3NlZFxuICogaXQgLS0gcGFzc2VkIGRpcmVjdGx5IHRvIGZsdXhNaXhpbidzIGBjb25uZWN0VG9TdG9yZXMoKWAgZnVuY3Rpb24gYW5kXG4gKiBzZXQgYXMgdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBjb21wb25lbnQncyBzdGF0ZSBpcyBpbmplY3RlZCBhcyBwcm9wcyB0b1xuICogY2hpbGQgY29tcG9uZW50cy5cbiAqXG4gKiBUaGUgcHJhY3RpY2FsIHVwc2hvdCBvZiBhbGwgdGhpcyBpcyB0aGF0IGZsdXhNaXhpbiwgc3RhdGUgY2hhbmdlcywgYW5kXG4gKiBjb250ZXh0IGFyZSBub3cgc2ltcGx5IGltcGxlbWVudGF0aW9uIGRldGFpbHMuIEFtb25nIG90aGVyIHRoaW5ncywgdGhpcyBtZWFuc1xuICogeW91IGNhbiB3cml0ZSB5b3VyIGNvbXBvbmVudHMgYXMgcGxhaW4gRVM2IGNsYXNzZXMuIEhlcmUncyBhbiBleGFtcGxlOlxuICpcbiAqIGNsYXNzIFBhcmVudENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgPEZsdXhDb21wb25lbnQgY29ubmVjdFRvU3RvcmU9XCJmb29TdG9yZVwiPlxuICogICAgICAgPENoaWxkQ29tcG9uZW50IC8+XG4gKiAgICAgPC9GbHV4Q29tcG9uZW50PlxuICogICB9XG4gKlxuICogfVxuICpcbiAqIENoaWxkQ29tcG9uZW50IGluIHRoaXMgZXhhbXBsZSBoYXMgcHJvcCBgZmx1eGAgY29udGFpbmluZyB0aGUgZmx1eCBpbnN0YW5jZSxcbiAqIGFuZCBwcm9wcyB0aGF0IHN5bmMgd2l0aCBlYWNoIG9mIHRoZSBzdGF0ZSBrZXlzIG9mIGZvb1N0b3JlLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnN0YW5jZU1ldGhvZHMsIHN0YXRpY1Byb3BlcnRpZXMgfSBmcm9tICcuL3JlYWN0Q29tcG9uZW50TWV0aG9kcyc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG5jbGFzcyBGbHV4Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICB0aGlzLmluaXRpYWxpemUoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmNvbm5lY3RUb1N0b3Jlcyhwcm9wcy5jb25uZWN0VG9TdG9yZXMpO1xuXG4gICAgdGhpcy53cmFwQ2hpbGQgPSB0aGlzLndyYXBDaGlsZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgd3JhcENoaWxkKGNoaWxkKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY29ubmVjdFRvU3RvcmVzLCAuLi5leHRyYVByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChcbiAgICAgIGNoaWxkLFxuICAgICAgdGhpcy5nZXRDaGlsZFByb3BzKClcbiAgICApO1xuICB9XG5cbiAgZ2V0Q2hpbGRQcm9wcygpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCByZW5kZXIsIC4uLmV4dHJhUHJvcHMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gYXNzaWduKFxuICAgICAgeyBmbHV4OiB0aGlzLmdldEZsdXgoKSB9LFxuICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgIGV4dHJhUHJvcHNcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHJlbmRlciwgLi4uZXh0cmFQcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gcmVuZGVyKHRoaXMuZ2V0Q2hpbGRQcm9wcygpKTtcblxuICAgIGlmICghY2hpbGRyZW4pIHJldHVybiBudWxsO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbjtcbiAgICAgIHJldHVybiB0aGlzLndyYXBDaGlsZChjaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiA8c3Bhbj57UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCB0aGlzLndyYXBDaGlsZCl9PC9zcGFuPjtcbiAgICB9XG4gIH1cbn1cblxuYXNzaWduKFxuICBGbHV4Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgaW5zdGFuY2VNZXRob2RzXG4pO1xuXG5hc3NpZ24oRmx1eENvbXBvbmVudCwgc3RhdGljUHJvcGVydGllcyk7XG5cbmV4cG9ydCBkZWZhdWx0IEZsdXhDb21wb25lbnQ7XG4iXX0=