"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

module.exports = fluxMixin;
/**
 * fluxMixin
 *
 * Exports a function that creates a React component mixin. Implements methods
 * from reactComponentMethods.
 *
 * Any arguments passed to the mixin creator are passed to `connectToStores()`
 * and used as the return value of `getInitialState()`. This lets you handle
 * all of the state initialization and updates in a single place, while removing
 * the burden of manually adding and removing store listeners.
 *
 * @example
 * let Component = React.createClass({
 *   mixins: [fluxMixin({
 *     storeA: store => ({
 *       foo: store.state.a,
 *     }),
 *     storeB: store => ({
 *       bar: store.state.b,
 *     })
 *   }]
 * });
 */

var PropTypes = require("react").PropTypes;
var Flux = require("../Flux").Flux;
var _reactComponentMethods = require("./reactComponentMethods");

var instanceMethods = _reactComponentMethods.instanceMethods;
var staticProperties = _reactComponentMethods.staticProperties;
var assign = _interopRequire(require("object-assign"));

function fluxMixin() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  function getInitialState() {
    var _ref;
    this.initialize();
    return (_ref = this).connectToStores.apply(_ref, args);
  }

  return assign({ getInitialState: getInitialState }, instanceMethods, staticProperties);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRvbnMvZmx1eE1peGluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7aUJBNkJ3QixTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTHhCLFNBQVMsV0FBUSxPQUFPLEVBQXhCLFNBQVM7SUFDVCxJQUFJLFdBQVEsU0FBUyxFQUFyQixJQUFJO3FDQUNxQyx5QkFBeUI7O0lBQWxFLGVBQWUsMEJBQWYsZUFBZTtJQUFFLGdCQUFnQiwwQkFBaEIsZ0JBQWdCO0lBQ25DLE1BQU0sMkJBQU0sZUFBZTs7QUFFbkIsU0FBUyxTQUFTLEdBQVU7b0NBQU4sSUFBSTtBQUFKLFFBQUk7OztBQUN2QyxXQUFTLGVBQWUsR0FBRzs7QUFDekIsUUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ2xCLFdBQU8sUUFBQSxJQUFJLEVBQUMsZUFBZSxNQUFBLE9BQUksSUFBSSxDQUFDLENBQUM7R0FDdEM7O0FBRUQsU0FBTyxNQUFNLENBQ1gsRUFBRSxlQUFlLEVBQWYsZUFBZSxFQUFFLEVBQ25CLGVBQWUsRUFDZixnQkFBZ0IsQ0FDakIsQ0FBQztDQUNIIiwiZmlsZSI6InNyYy9hZGRvbnMvZmx1eE1peGluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBmbHV4TWl4aW5cbiAqXG4gKiBFeHBvcnRzIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgUmVhY3QgY29tcG9uZW50IG1peGluLiBJbXBsZW1lbnRzIG1ldGhvZHNcbiAqIGZyb20gcmVhY3RDb21wb25lbnRNZXRob2RzLlxuICpcbiAqIEFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBtaXhpbiBjcmVhdG9yIGFyZSBwYXNzZWQgdG8gYGNvbm5lY3RUb1N0b3JlcygpYFxuICogYW5kIHVzZWQgYXMgdGhlIHJldHVybiB2YWx1ZSBvZiBgZ2V0SW5pdGlhbFN0YXRlKClgLiBUaGlzIGxldHMgeW91IGhhbmRsZVxuICogYWxsIG9mIHRoZSBzdGF0ZSBpbml0aWFsaXphdGlvbiBhbmQgdXBkYXRlcyBpbiBhIHNpbmdsZSBwbGFjZSwgd2hpbGUgcmVtb3ZpbmdcbiAqIHRoZSBidXJkZW4gb2YgbWFudWFsbHkgYWRkaW5nIGFuZCByZW1vdmluZyBzdG9yZSBsaXN0ZW5lcnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGxldCBDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgIG1peGluczogW2ZsdXhNaXhpbih7XG4gKiAgICAgc3RvcmVBOiBzdG9yZSA9PiAoe1xuICogICAgICAgZm9vOiBzdG9yZS5zdGF0ZS5hLFxuICogICAgIH0pLFxuICogICAgIHN0b3JlQjogc3RvcmUgPT4gKHtcbiAqICAgICAgIGJhcjogc3RvcmUuc3RhdGUuYixcbiAqICAgICB9KVxuICogICB9XVxuICogfSk7XG4gKi9cblxuaW1wb3J0IHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRmx1eCB9IGZyb20gJy4uL0ZsdXgnO1xuaW1wb3J0IHsgaW5zdGFuY2VNZXRob2RzLCBzdGF0aWNQcm9wZXJ0aWVzIH0gZnJvbSAnLi9yZWFjdENvbXBvbmVudE1ldGhvZHMnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmx1eE1peGluKC4uLmFyZ3MpIHtcbiAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3RUb1N0b3JlcyguLi5hcmdzKTtcbiAgfVxuXG4gIHJldHVybiBhc3NpZ24oXG4gICAgeyBnZXRJbml0aWFsU3RhdGUgfSxcbiAgICBpbnN0YW5jZU1ldGhvZHMsXG4gICAgc3RhdGljUHJvcGVydGllc1xuICApO1xufTtcbiJdfQ==