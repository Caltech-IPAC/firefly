"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var TestUtils = _interopRequireWildcard(require("../TestUtils"));

var sinon = _interopRequire(require("sinon"));




describe("TestUtils", function () {
  describe("#simulateAction", function () {
    it("calls the stores handler", function () {
      var store = mockStore();
      var actionFunc = function () {};
      actionFunc._id = "actionFunc";

      TestUtils.simulateAction(store, "foo", "foo body");
      TestUtils.simulateAction(store, actionFunc, "actionFunc body");

      expect(store.handler.calledTwice).to.be["true"];

      expect(store.handler.getCall(0).args[0]).to.deep.equal({
        actionId: "foo",
        body: "foo body"
      });

      expect(store.handler.getCall(1).args[0]).to.deep.equal({
        actionId: "actionFunc",
        body: "actionFunc body"
      });
    });
  });

  describe("#simulateActionAsync", function () {
    it("it handles async begin", function () {
      var store = mockStore();

      TestUtils.simulateActionAsync(store, "foo", "begin");

      expect(store.handler.calledOnce).to.be["true"];
      expect(store.handler.firstCall.args[0]).to.deep.equal({
        actionId: "foo",
        async: "begin"
      });
    });

    it("it handles async begin w/ action args", function () {
      var store = mockStore();

      TestUtils.simulateActionAsync(store, "foo", "begin", "arg1", "arg2");

      expect(store.handler.calledOnce).to.be["true"];
      expect(store.handler.firstCall.args[0]).to.deep.equal({
        actionId: "foo",
        async: "begin",
        actionArgs: ["arg1", "arg2"]
      });
    });

    it("it handles async success", function () {
      var store = mockStore();

      TestUtils.simulateActionAsync(store, "foo", "success", { foo: "bar" });

      expect(store.handler.calledOnce).to.be["true"];
      expect(store.handler.firstCall.args[0]).to.deep.equal({
        actionId: "foo",
        async: "success",
        body: {
          foo: "bar"
        }
      });
    });

    it("it handles async failure", function () {
      var store = mockStore();

      TestUtils.simulateActionAsync(store, "foo", "failure", "error message");

      expect(store.handler.calledOnce).to.be["true"];
      expect(store.handler.firstCall.args[0]).to.deep.equal({
        actionId: "foo",
        async: "failure",
        error: "error message"
      });
    });

    it("it throws error with invalid asyncAction", function () {
      var store = mockStore();
      var simulate = function () {
        return TestUtils.simulateActionAsync(store, "foo", "fizbin");
      };

      expect(simulate).to["throw"]("asyncAction must be one of: begin, success or failure");
    });
  });
});

function mockStore() {
  return {
    handler: sinon.spy()
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGRvbnMvX190ZXN0c19fL1Rlc3RVdGlscy10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFZLFNBQVMsbUNBQU0sY0FBYzs7SUFDbEMsS0FBSywyQkFBTSxPQUFPOzs7OztBQUd6QixRQUFRLENBQUMsV0FBVyxFQUFFLFlBQU07QUFDMUIsVUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQU07QUFDaEMsTUFBRSxDQUFDLDBCQUEwQixFQUFFLFlBQU07QUFDbkMsVUFBTSxLQUFLLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDMUIsVUFBTSxVQUFVLEdBQUcsWUFBVyxFQUFFLENBQUM7QUFDakMsZ0JBQVUsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDOztBQUU5QixlQUFTLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbkQsZUFBUyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7O0FBRS9ELFlBQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQUssQ0FBQzs7QUFFN0MsWUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3JELGdCQUFRLEVBQUUsS0FBSztBQUNmLFlBQUksRUFBRSxVQUFVO09BQ2pCLENBQUMsQ0FBQzs7QUFFSCxZQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDckQsZ0JBQVEsRUFBRSxZQUFZO0FBQ3RCLFlBQUksRUFBRSxp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Qzs7QUFFSCxNQUFFLENBQUMsMENBQTBDLEVBQUUsWUFBTTtBQUNuRCxVQUFNLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUMxQixVQUFNLFFBQVEsR0FBRztlQUFNLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQztPQUFBLENBQUM7O0FBRTdFLFlBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFNBQU0sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0tBQ3BGLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQzs7QUFFSCxTQUFTLFNBQVMsR0FBRztBQUNuQixTQUFPO0FBQ0wsV0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUU7R0FDckIsQ0FBQztDQUNIIiwiZmlsZSI6InNyYy9hZGRvbnMvX190ZXN0c19fL1Rlc3RVdGlscy10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVGVzdFV0aWxzIGZyb20gJy4uL1Rlc3RVdGlscyc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5cbmRlc2NyaWJlKCdUZXN0VXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCcjc2ltdWxhdGVBY3Rpb24nLCAoKSA9PiB7XG4gICAgaXQoJ2NhbGxzIHRoZSBzdG9yZXMgaGFuZGxlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKCk7XG4gICAgICBjb25zdCBhY3Rpb25GdW5jID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgIGFjdGlvbkZ1bmMuX2lkID0gJ2FjdGlvbkZ1bmMnO1xuXG4gICAgICBUZXN0VXRpbHMuc2ltdWxhdGVBY3Rpb24oc3RvcmUsICdmb28nLCAnZm9vIGJvZHknKTtcbiAgICAgIFRlc3RVdGlscy5zaW11bGF0ZUFjdGlvbihzdG9yZSwgYWN0aW9uRnVuYywgJ2FjdGlvbkZ1bmMgYm9keScpO1xuXG4gICAgICBleHBlY3Qoc3RvcmUuaGFuZGxlci5jYWxsZWRUd2ljZSkudG8uYmUudHJ1ZTtcblxuICAgICAgZXhwZWN0KHN0b3JlLmhhbmRsZXIuZ2V0Q2FsbCgwKS5hcmdzWzBdKS50by5kZWVwLmVxdWFsKHtcbiAgICAgICAgYWN0aW9uSWQ6ICdmb28nLFxuICAgICAgICBib2R5OiAnZm9vIGJvZHknXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHN0b3JlLmhhbmRsZXIuZ2V0Q2FsbCgxKS5hcmdzWzBdKS50by5kZWVwLmVxdWFsKHtcbiAgICAgICAgYWN0aW9uSWQ6ICdhY3Rpb25GdW5jJyxcbiAgICAgICAgYm9keTogJ2FjdGlvbkZ1bmMgYm9keSdcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnI3NpbXVsYXRlQWN0aW9uQXN5bmMnLCAoKSA9PiB7XG4gICAgaXQoJ2l0IGhhbmRsZXMgYXN5bmMgYmVnaW4nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZSA9IG1vY2tTdG9yZSgpO1xuXG4gICAgICBUZXN0VXRpbHMuc2ltdWxhdGVBY3Rpb25Bc3luYyhzdG9yZSwgJ2ZvbycsICdiZWdpbicpO1xuXG4gICAgICBleHBlY3Qoc3RvcmUuaGFuZGxlci5jYWxsZWRPbmNlKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHN0b3JlLmhhbmRsZXIuZmlyc3RDYWxsLmFyZ3NbMF0pLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgICBhY3Rpb25JZDogJ2ZvbycsXG4gICAgICAgIGFzeW5jOiAnYmVnaW4nXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdpdCBoYW5kbGVzIGFzeW5jIGJlZ2luIHcvIGFjdGlvbiBhcmdzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoKTtcblxuICAgICAgVGVzdFV0aWxzLnNpbXVsYXRlQWN0aW9uQXN5bmMoc3RvcmUsICdmb28nLCAnYmVnaW4nLCAnYXJnMScsICdhcmcyJyk7XG5cbiAgICAgIGV4cGVjdChzdG9yZS5oYW5kbGVyLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3Qoc3RvcmUuaGFuZGxlci5maXJzdENhbGwuYXJnc1swXSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgIGFjdGlvbklkOiAnZm9vJyxcbiAgICAgICAgYXN5bmM6ICdiZWdpbicsXG4gICAgICAgIGFjdGlvbkFyZ3M6IFsnYXJnMScsICdhcmcyJ11cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2l0IGhhbmRsZXMgYXN5bmMgc3VjY2VzcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKCk7XG5cbiAgICAgIFRlc3RVdGlscy5zaW11bGF0ZUFjdGlvbkFzeW5jKHN0b3JlLCAnZm9vJywgJ3N1Y2Nlc3MnLCB7IGZvbzogJ2JhcicgfSk7XG5cbiAgICAgIGV4cGVjdChzdG9yZS5oYW5kbGVyLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3Qoc3RvcmUuaGFuZGxlci5maXJzdENhbGwuYXJnc1swXSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgIGFjdGlvbklkOiAnZm9vJyxcbiAgICAgICAgYXN5bmM6ICdzdWNjZXNzJyxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIGZvbzogJ2JhcidcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnaXQgaGFuZGxlcyBhc3luYyBmYWlsdXJlJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoKTtcblxuICAgICAgVGVzdFV0aWxzLnNpbXVsYXRlQWN0aW9uQXN5bmMoc3RvcmUsICdmb28nLCAnZmFpbHVyZScsICdlcnJvciBtZXNzYWdlJyk7XG5cbiAgICAgIGV4cGVjdChzdG9yZS5oYW5kbGVyLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3Qoc3RvcmUuaGFuZGxlci5maXJzdENhbGwuYXJnc1swXSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgIGFjdGlvbklkOiAnZm9vJyxcbiAgICAgICAgYXN5bmM6ICdmYWlsdXJlJyxcbiAgICAgICAgZXJyb3I6ICdlcnJvciBtZXNzYWdlJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnaXQgdGhyb3dzIGVycm9yIHdpdGggaW52YWxpZCBhc3luY0FjdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0gbW9ja1N0b3JlKCk7XG4gICAgICBjb25zdCBzaW11bGF0ZSA9ICgpID0+IFRlc3RVdGlscy5zaW11bGF0ZUFjdGlvbkFzeW5jKHN0b3JlLCAnZm9vJywgJ2ZpemJpbicpO1xuXG4gICAgICBleHBlY3Qoc2ltdWxhdGUpLnRvLnRocm93KCdhc3luY0FjdGlvbiBtdXN0IGJlIG9uZSBvZjogYmVnaW4sIHN1Y2Nlc3Mgb3IgZmFpbHVyZScpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBtb2NrU3RvcmUoKSB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlcjogc2lub24uc3B5KClcbiAgfTtcbn1cbiJdfQ==