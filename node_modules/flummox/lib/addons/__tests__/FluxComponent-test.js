"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _Flux = require("../../Flux");

var Flummox = _Flux.Flummox;
var Store = _Flux.Store;
var Actions = _Flux.Actions;
var addContext = _interopRequire(require("./addContext"));

var React = _interopRequire(require("react/addons"));

var TestUtils = React.addons.TestUtils;
var FluxComponent = _interopRequire(require("../FluxComponent"));

describe("FluxComponent", function () {
  var TestActions = (function (Actions) {
    function TestActions() {
      _classCallCheck(this, TestActions);

      if (Actions != null) {
        Actions.apply(this, arguments);
      }
    }

    _inherits(TestActions, Actions);

    _prototypeProperties(TestActions, null, {
      getSomething: {
        value: function getSomething(something) {
          return something;
        },
        writable: true,
        configurable: true
      }
    });

    return TestActions;
  })(Actions);

  var TestStore = (function (Store) {
    function TestStore(flux) {
      _classCallCheck(this, TestStore);

      _get(Object.getPrototypeOf(TestStore.prototype), "constructor", this).call(this);

      var testActions = flux.getActions("test");
      this.register(testActions.getSomething, this.handleGetSomething);

      this.state = {
        something: null
      };
    }

    _inherits(TestStore, Store);

    _prototypeProperties(TestStore, null, {
      handleGetSomething: {
        value: function handleGetSomething(something) {
          this.setState({ something: something });
        },
        writable: true,
        configurable: true
      }
    });

    return TestStore;
  })(Store);

  var Flux = (function (Flummox) {
    function Flux() {
      _classCallCheck(this, Flux);

      _get(Object.getPrototypeOf(Flux.prototype), "constructor", this).call(this);

      this.createActions("test", TestActions);
      this.createStore("test", TestStore, this);
    }

    _inherits(Flux, Flummox);

    return Flux;
  })(Flummox);

  it("gets Flux property from either props or context", function () {
    var flux = new Flux();
    var contextComponent = undefined,
        propsComponent = undefined;

    var ContextComponent = addContext(FluxComponent, { flux: flux }, { flux: React.PropTypes.instanceOf(Flummox) });

    var tree = TestUtils.renderIntoDocument(React.createElement(ContextComponent, null));

    contextComponent = TestUtils.findRenderedComponentWithType(tree, FluxComponent);

    propsComponent = TestUtils.renderIntoDocument(React.createElement(FluxComponent, { flux: flux }));

    expect(contextComponent.flux).to.be.an["instanceof"](Flummox);
    expect(propsComponent.flux).to.be.an["instanceof"](Flummox);
  });

  it("passes connectToStore prop to reactComponentMethod connectToStores()", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var component = TestUtils.renderIntoDocument(React.createElement(FluxComponent, { flux: flux, connectToStores: "test" }));

    actions.getSomething("something good");
    expect(component.state.something).to.deep.equal("something good");
    actions.getSomething("something else");
    expect(component.state.something).to.deep.equal("something else");
  });

  it("injects children with flux prop", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    expect(div.props.flux).to.equal(flux);
  });

  it("injects children with props corresponding to component state", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, connectToStores: "test" },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    actions.getSomething("something good");
    expect(div.props.something).to.equal("something good");
    actions.getSomething("something else");
    expect(div.props.something).to.equal("something else");
  });

  it("injects children with any extra props", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, extraProp: "hello" },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    expect(div.props.extraProp).to.equal("hello");
    expect(Object.keys(div.props)).to.deep.equal(["flux", "extraProp"]);
  });

  it("wraps multiple children in span tag", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null),
      React.createElement("div", null)
    ));

    var wrapper = TestUtils.findRenderedDOMComponentWithTag(tree, "span");
    var divs = TestUtils.scryRenderedDOMComponentsWithTag(tree, "div");

    expect(divs.length).to.equal(2);
  });

  it("does not wrap single child in span tag", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null)
    ));

    expect(TestUtils.findRenderedDOMComponentWithTag.bind(TestUtils, tree, "span")).to["throw"]("Did not find exactly one match for tag:span");
  });

  it("allows for nested FluxComponents", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, connectToStores: "test" },
      React.createElement(
        FluxComponent,
        null,
        React.createElement("div", null)
      )
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    actions.getSomething("something good");
    expect(div.props.something).to.equal("something good");
    actions.getSomething("something else");
    expect(div.props.something).to.equal("something else");
  });

  it("uses `render` prop for custom rendering, if it exists", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(FluxComponent, {
      flux: flux,
      connectToStores: "test",
      render: function (props) {
        return React.createElement("div", { something: props.something });
      }
    }));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    actions.getSomething("something good");
    expect(div.props.something).to.equal("something good");
    actions.getSomething("something else");
    expect(div.props.something).to.equal("something else");
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGRvbnMvX190ZXN0c19fL0ZsdXhDb21wb25lbnQtdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBQXdDLFlBQVk7O0lBQTNDLE9BQU8sU0FBUCxPQUFPO0lBQUUsS0FBSyxTQUFMLEtBQUs7SUFBRSxPQUFPLFNBQVAsT0FBTztJQUN6QixVQUFVLDJCQUFNLGNBQWM7O0lBRTlCLEtBQUssMkJBQU0sY0FBYzs7SUFDeEIsU0FBUyxHQUFLLEtBQUssQ0FBQyxNQUFNLENBQTFCLFNBQVM7SUFFVixhQUFhLDJCQUFNLGtCQUFrQjs7QUFFNUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO01BRXhCLFdBQVcsY0FBUyxPQUFPO2FBQTNCLFdBQVc7NEJBQVgsV0FBVzs7VUFBUyxPQUFPO0FBQVAsZUFBTzs7OztjQUEzQixXQUFXLEVBQVMsT0FBTzs7eUJBQTNCLFdBQVc7QUFDZixrQkFBWTtlQUFBLHNCQUFDLFNBQVMsRUFBRTtBQUN0QixpQkFBTyxTQUFTLENBQUM7U0FDbEI7Ozs7OztXQUhHLFdBQVc7S0FBUyxPQUFPOztNQU0zQixTQUFTLGNBQVMsS0FBSztBQUNoQixhQURQLFNBQVMsQ0FDRCxJQUFJOzRCQURaLFNBQVM7O0FBRVgsaUNBRkUsU0FBUyw2Q0FFSDs7QUFFUixVQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLFVBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7QUFFakUsVUFBSSxDQUFDLEtBQUssR0FBRztBQUNYLGlCQUFTLEVBQUUsSUFBSTtPQUNoQixDQUFDO0tBQ0g7O2NBVkcsU0FBUyxFQUFTLEtBQUs7O3lCQUF2QixTQUFTO0FBWWIsd0JBQWtCO2VBQUEsNEJBQUMsU0FBUyxFQUFFO0FBQzVCLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQVQs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LE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUV4QyxRQUFNLElBQUksR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQ3ZDLG9CQUFDLGFBQWE7QUFDWixVQUFJLEVBQUUsSUFBSSxBQUFDO0FBQ1gscUJBQWUsRUFBQyxNQUFNO0FBQ3RCLFlBQU0sRUFBRSxVQUFBLEtBQUs7ZUFDWCw2QkFBSyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQUFBQyxHQUFHO09BQUEsQUFDcEM7TUFDRCxDQUNILENBQUM7O0FBRUYsUUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLCtCQUErQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQzs7QUFFbkUsV0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3ZDLFVBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2RCxXQUFPLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdkMsVUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0dBQ3hELENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJzcmMvYWRkb25zL19fdGVzdHNfXy9GbHV4Q29tcG9uZW50LXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbHVtbW94LCBTdG9yZSwgQWN0aW9ucyB9IGZyb20gJy4uLy4uL0ZsdXgnO1xuaW1wb3J0IGFkZENvbnRleHQgZnJvbSAnLi9hZGRDb250ZXh0JztcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0L2FkZG9ucyc7XG5jb25zdCB7IFRlc3RVdGlscyB9ID0gUmVhY3QuYWRkb25zO1xuXG5pbXBvcnQgRmx1eENvbXBvbmVudCBmcm9tICcuLi9GbHV4Q29tcG9uZW50JztcblxuZGVzY3JpYmUoJ0ZsdXhDb21wb25lbnQnLCAoKSA9PiB7XG5cbiAgY2xhc3MgVGVzdEFjdGlvbnMgZXh0ZW5kcyBBY3Rpb25zIHtcbiAgICBnZXRTb21ldGhpbmcoc29tZXRoaW5nKSB7XG4gICAgICByZXR1cm4gc29tZXRoaW5nO1xuICAgIH1cbiAgfVxuXG4gIGNsYXNzIFRlc3RTdG9yZSBleHRlbmRzIFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihmbHV4KSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICBjb25zdCB0ZXN0QWN0aW9ucyA9IGZsdXguZ2V0QWN0aW9ucygndGVzdCcpO1xuICAgICAgdGhpcy5yZWdpc3Rlcih0ZXN0QWN0aW9ucy5nZXRTb21ldGhpbmcsIHRoaXMuaGFuZGxlR2V0U29tZXRoaW5nKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgc29tZXRoaW5nOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGhhbmRsZUdldFNvbWV0aGluZyhzb21ldGhpbmcpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb21ldGhpbmcgfSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3MgRmx1eCBleHRlbmRzIEZsdW1tb3gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgdGhpcy5jcmVhdGVBY3Rpb25zKCd0ZXN0JywgVGVzdEFjdGlvbnMpO1xuICAgICAgdGhpcy5jcmVhdGVTdG9yZSgndGVzdCcsIFRlc3RTdG9yZSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgaXQoJ2dldHMgRmx1eCBwcm9wZXJ0eSBmcm9tIGVpdGhlciBwcm9wcyBvciBjb250ZXh0JywgKCkgPT4ge1xuICAgIGNvbnN0IGZsdXggPSBuZXcgRmx1eCgpO1xuICAgIGxldCBjb250ZXh0Q29tcG9uZW50LCBwcm9wc0NvbXBvbmVudDtcblxuICAgIGNvbnN0IENvbnRleHRDb21wb25lbnQgPSBhZGRDb250ZXh0KFxuICAgICAgRmx1eENvbXBvbmVudCxcbiAgICAgIHsgZmx1eCB9LFxuICAgICAgeyBmbHV4OiBSZWFjdC5Qcm9wVHlwZXMuaW5zdGFuY2VPZihGbHVtbW94KSB9XG4gICAgKTtcblxuICAgIGNvbnN0IHRyZWUgPSBUZXN0VXRpbHMucmVuZGVySW50b0RvY3VtZW50KDxDb250ZXh0Q29tcG9uZW50IC8+KTtcblxuICAgIGNvbnRleHRDb21wb25lbnQgPSBUZXN0VXRpbHMuZmluZFJlbmRlcmVkQ29tcG9uZW50V2l0aFR5cGUoXG4gICAgICB0cmVlLCBGbHV4Q29tcG9uZW50XG4gICAgKTtcblxuICAgIHByb3BzQ29tcG9uZW50ID0gVGVzdFV0aWxzLnJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxGbHV4Q29tcG9uZW50IGZsdXg9e2ZsdXh9IC8+XG4gICAgKTtcblxuICAgIGV4cGVjdChjb250ZXh0Q29tcG9uZW50LmZsdXgpLnRvLmJlLmFuLmluc3RhbmNlb2YoRmx1bW1veCk7XG4gICAgZXhwZWN0KHByb3BzQ29tcG9uZW50LmZsdXgpLnRvLmJlLmFuLmluc3RhbmNlb2YoRmx1bW1veCk7XG4gIH0pO1xuXG4gIGl0KCdwYXNzZXMgY29ubmVjdFRvU3RvcmUgcHJvcCB0byByZWFjdENvbXBvbmVudE1ldGhvZCBjb25uZWN0VG9TdG9yZXMoKScsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcbiAgICBjb25zdCBhY3Rpb25zID0gZmx1eC5nZXRBY3Rpb25zKCd0ZXN0Jyk7XG5cbiAgICBjb25zdCBjb21wb25lbnQgPSBUZXN0VXRpbHMucmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEZsdXhDb21wb25lbnQgZmx1eD17Zmx1eH0gY29ubmVjdFRvU3RvcmVzPVwidGVzdFwiIC8+XG4gICAgKTtcblxuICAgIGFjdGlvbnMuZ2V0U29tZXRoaW5nKCdzb21ldGhpbmcgZ29vZCcpO1xuICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUuc29tZXRoaW5nKS50by5kZWVwLmVxdWFsKCdzb21ldGhpbmcgZ29vZCcpO1xuICAgIGFjdGlvbnMuZ2V0U29tZXRoaW5nKCdzb21ldGhpbmcgZWxzZScpO1xuICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUuc29tZXRoaW5nKS50by5kZWVwLmVxdWFsKCdzb21ldGhpbmcgZWxzZScpO1xuICB9KTtcblxuICBpdCgnaW5qZWN0cyBjaGlsZHJlbiB3aXRoIGZsdXggcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcbiAgICBjb25zdCBhY3Rpb25zID0gZmx1eC5nZXRBY3Rpb25zKCd0ZXN0Jyk7XG5cbiAgICBjb25zdCB0cmVlID0gVGVzdFV0aWxzLnJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxGbHV4Q29tcG9uZW50IGZsdXg9e2ZsdXh9PlxuICAgICAgICA8ZGl2IC8+XG4gICAgICA8L0ZsdXhDb21wb25lbnQ+XG4gICAgKTtcblxuICAgIGNvbnN0IGRpdiA9IFRlc3RVdGlscy5maW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoVGFnKHRyZWUsICdkaXYnKTtcblxuICAgIGV4cGVjdChkaXYucHJvcHMuZmx1eCkudG8uZXF1YWwoZmx1eCk7XG4gIH0pO1xuXG4gIGl0KCdpbmplY3RzIGNoaWxkcmVuIHdpdGggcHJvcHMgY29ycmVzcG9uZGluZyB0byBjb21wb25lbnQgc3RhdGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZmx1eCA9IG5ldyBGbHV4KCk7XG4gICAgY29uc3QgYWN0aW9ucyA9IGZsdXguZ2V0QWN0aW9ucygndGVzdCcpO1xuXG4gICAgY29uc3QgdHJlZSA9IFRlc3RVdGlscy5yZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICA8Rmx1eENvbXBvbmVudCBmbHV4PXtmbHV4fSBjb25uZWN0VG9TdG9yZXM9XCJ0ZXN0XCI+XG4gICAgICAgIDxkaXYgLz5cbiAgICAgIDwvRmx1eENvbXBvbmVudD5cbiAgICApO1xuXG4gICAgY29uc3QgZGl2ID0gVGVzdFV0aWxzLmZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhUYWcodHJlZSwgJ2RpdicpO1xuXG4gICAgYWN0aW9ucy5nZXRTb21ldGhpbmcoJ3NvbWV0aGluZyBnb29kJyk7XG4gICAgZXhwZWN0KGRpdi5wcm9wcy5zb21ldGhpbmcpLnRvLmVxdWFsKCdzb21ldGhpbmcgZ29vZCcpO1xuICAgIGFjdGlvbnMuZ2V0U29tZXRoaW5nKCdzb21ldGhpbmcgZWxzZScpO1xuICAgIGV4cGVjdChkaXYucHJvcHMuc29tZXRoaW5nKS50by5lcXVhbCgnc29tZXRoaW5nIGVsc2UnKTtcbiAgfSk7XG5cbiAgaXQoJ2luamVjdHMgY2hpbGRyZW4gd2l0aCBhbnkgZXh0cmEgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgZmx1eCA9IG5ldyBGbHV4KCk7XG5cbiAgICBjb25zdCB0cmVlID0gVGVzdFV0aWxzLnJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxGbHV4Q29tcG9uZW50IGZsdXg9e2ZsdXh9IGV4dHJhUHJvcD1cImhlbGxvXCI+XG4gICAgICAgIDxkaXYgLz5cbiAgICAgIDwvRmx1eENvbXBvbmVudD5cbiAgICApO1xuXG4gICAgY29uc3QgZGl2ID0gVGVzdFV0aWxzLmZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhUYWcodHJlZSwgJ2RpdicpO1xuXG4gICAgZXhwZWN0KGRpdi5wcm9wcy5leHRyYVByb3ApLnRvLmVxdWFsKCdoZWxsbycpO1xuICAgIGV4cGVjdChPYmplY3Qua2V5cyhkaXYucHJvcHMpKS50by5kZWVwLmVxdWFsKFsnZmx1eCcsICdleHRyYVByb3AnXSk7XG4gIH0pO1xuXG4gIGl0KCd3cmFwcyBtdWx0aXBsZSBjaGlsZHJlbiBpbiBzcGFuIHRhZycsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcblxuICAgIGNvbnN0IHRyZWUgPSBUZXN0VXRpbHMucmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEZsdXhDb21wb25lbnQgZmx1eD17Zmx1eH0+XG4gICAgICAgIDxkaXYgLz5cbiAgICAgICAgPGRpdiAvPlxuICAgICAgPC9GbHV4Q29tcG9uZW50PlxuICAgICk7XG5cbiAgICBjb25zdCB3cmFwcGVyID0gVGVzdFV0aWxzLmZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhUYWcodHJlZSwgJ3NwYW4nKTtcbiAgICBjb25zdCBkaXZzID0gVGVzdFV0aWxzLnNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoVGFnKHRyZWUsICdkaXYnKTtcblxuICAgIGV4cGVjdChkaXZzLmxlbmd0aCkudG8uZXF1YWwoMik7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCB3cmFwIHNpbmdsZSBjaGlsZCBpbiBzcGFuIHRhZycsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcblxuICAgIGNvbnN0IHRyZWUgPSBUZXN0VXRpbHMucmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEZsdXhDb21wb25lbnQgZmx1eD17Zmx1eH0+XG4gICAgICAgIDxkaXYgLz5cbiAgICAgIDwvRmx1eENvbXBvbmVudD5cbiAgICApO1xuXG4gICAgZXhwZWN0KFxuICAgICAgVGVzdFV0aWxzLmZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhUYWcuYmluZChUZXN0VXRpbHMsIHRyZWUsICdzcGFuJylcbiAgICApLnRvLnRocm93KCdEaWQgbm90IGZpbmQgZXhhY3RseSBvbmUgbWF0Y2ggZm9yIHRhZzpzcGFuJyk7XG4gIH0pO1xuXG4gIGl0KCdhbGxvd3MgZm9yIG5lc3RlZCBGbHV4Q29tcG9uZW50cycsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcbiAgICBjb25zdCBhY3Rpb25zID0gZmx1eC5nZXRBY3Rpb25zKCd0ZXN0Jyk7XG5cbiAgICBjb25zdCB0cmVlID0gVGVzdFV0aWxzLnJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxGbHV4Q29tcG9uZW50IGZsdXg9e2ZsdXh9IGNvbm5lY3RUb1N0b3Jlcz1cInRlc3RcIj5cbiAgICAgICAgPEZsdXhDb21wb25lbnQ+XG4gICAgICAgICAgPGRpdiAvPlxuICAgICAgICA8L0ZsdXhDb21wb25lbnQ+XG4gICAgICA8L0ZsdXhDb21wb25lbnQ+XG4gICAgKTtcblxuICAgIGNvbnN0IGRpdiA9IFRlc3RVdGlscy5maW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoVGFnKHRyZWUsICdkaXYnKTtcblxuICAgIGFjdGlvbnMuZ2V0U29tZXRoaW5nKCdzb21ldGhpbmcgZ29vZCcpO1xuICAgIGV4cGVjdChkaXYucHJvcHMuc29tZXRoaW5nKS50by5lcXVhbCgnc29tZXRoaW5nIGdvb2QnKTtcbiAgICBhY3Rpb25zLmdldFNvbWV0aGluZygnc29tZXRoaW5nIGVsc2UnKTtcbiAgICBleHBlY3QoZGl2LnByb3BzLnNvbWV0aGluZykudG8uZXF1YWwoJ3NvbWV0aGluZyBlbHNlJyk7XG4gIH0pO1xuXG4gIGl0KCd1c2VzIGByZW5kZXJgIHByb3AgZm9yIGN1c3RvbSByZW5kZXJpbmcsIGlmIGl0IGV4aXN0cycsICgpID0+IHtcbiAgICBjb25zdCBmbHV4ID0gbmV3IEZsdXgoKTtcbiAgICBjb25zdCBhY3Rpb25zID0gZmx1eC5nZXRBY3Rpb25zKCd0ZXN0Jyk7XG5cbiAgICBjb25zdCB0cmVlID0gVGVzdFV0aWxzLnJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxGbHV4Q29tcG9uZW50XG4gICAgICAgIGZsdXg9e2ZsdXh9XG4gICAgICAgIGNvbm5lY3RUb1N0b3Jlcz1cInRlc3RcIlxuICAgICAgICByZW5kZXI9e3Byb3BzID0+XG4gICAgICAgICAgPGRpdiBzb21ldGhpbmc9e3Byb3BzLnNvbWV0aGluZ30gLz5cbiAgICAgICAgfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgY29uc3QgZGl2ID0gVGVzdFV0aWxzLmZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhUYWcodHJlZSwgJ2RpdicpO1xuXG4gICAgYWN0aW9ucy5nZXRTb21ldGhpbmcoJ3NvbWV0aGluZyBnb29kJyk7XG4gICAgZXhwZWN0KGRpdi5wcm9wcy5zb21ldGhpbmcpLnRvLmVxdWFsKCdzb21ldGhpbmcgZ29vZCcpO1xuICAgIGFjdGlvbnMuZ2V0U29tZXRoaW5nKCdzb21ldGhpbmcgZWxzZScpO1xuICAgIGV4cGVjdChkaXYucHJvcHMuc29tZXRoaW5nKS50by5lcXVhbCgnc29tZXRoaW5nIGVsc2UnKTtcbiAgfSk7XG5cbn0pO1xuIl19