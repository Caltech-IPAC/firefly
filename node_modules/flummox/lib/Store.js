"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * Store
 *
 * Stores hold application state. They respond to actions sent by the dispatcher
 * and broadcast change events to listeners, so they can grab the latest data.
 * The key thing to remember is that the only way stores receive information
 * from the outside world is via the dispatcher.
 */

var EventEmitter = _interopRequire(require("eventemitter3"));

var assign = _interopRequire(require("object-assign"));

var Store = (function (EventEmitter) {
  /**
   * Stores are initialized with a reference
   * @type {Object}
   */
  function Store() {
    _classCallCheck(this, Store);

    this.state = null;

    this._handlers = {};
    this._asyncHandlers = {};
  }

  _inherits(Store, EventEmitter);

  _prototypeProperties(Store, {
    assignState: {
      value: function assignState(oldState, newState) {
        return assign({}, oldState, newState);
      },
      writable: true,
      configurable: true
    }
  }, {
    setState: {
      value: function setState(newState) {
        // Do a transactional state update if a function is passed
        if (typeof newState === "function") {
          var prevState = this._isHandlingDispatch ? this._pendingState : this.state;

          newState = newState(prevState);
        }

        if (this._isHandlingDispatch) {
          this._pendingState = this._assignState(this._pendingState, newState);
          this._emitChangeAfterHandlingDispatch = true;
        } else {
          if (process.env.NODE_ENV !== "production") {
            console.warn("Store#setState() called from outside an action handler. This is likely " + "a mistake. Flux stores should manage their own state.");
          }
          this.state = this._assignState(this.state, newState);
          this.emit("change");
        }
      },
      writable: true,
      configurable: true
    },
    replaceState: {
      value: function replaceState(newState) {
        if (this._isHandlingDispatch) {
          this._pendingState = this._assignState(undefined, newState);
          this._emitChangeAfterHandlingDispatch = true;
        } else {
          this.state = this._assignState(undefined, newState);
          this.emit("change");
        }
      },
      writable: true,
      configurable: true
    },
    _assignState: {
      value: function _assignState() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return (this.constructor.assignState || Store.assignState).apply(undefined, args);
      },
      writable: true,
      configurable: true
    },
    forceUpdate: {
      value: function forceUpdate() {
        if (this._isHandlingDispatch) {
          this._emitChangeAfterHandlingDispatch = true;
        } else {
          this.emit("change");
        }
      },
      writable: true,
      configurable: true
    },
    register: {
      value: function register(actionId, handler) {
        actionId = ensureActionId(actionId);

        if (typeof handler !== "function") {
          return;
        }this._handlers[actionId] = handler.bind(this);
      },
      writable: true,
      configurable: true
    },
    registerAsync: {
      value: function registerAsync(actionId, beginHandler, successHandler, failureHandler) {
        actionId = ensureActionId(actionId);

        var asyncHandlers = {
          begin: beginHandler,
          success: successHandler,
          failure: failureHandler };

        for (var key in asyncHandlers) {
          if (!asyncHandlers.hasOwnProperty(key)) continue;

          var handler = asyncHandlers[key];

          if (typeof handler === "function") {
            asyncHandlers[key] = handler.bind(this);
          } else {
            delete asyncHandlers[key];
          }
        }

        this._asyncHandlers[actionId] = asyncHandlers;
      },
      writable: true,
      configurable: true
    },
    waitFor: {
      value: function waitFor(tokensOrStores) {
        this._waitFor(tokensOrStores);
      },
      writable: true,
      configurable: true
    },
    handler: {
      value: function handler(payload) {
        var body = payload.body;
        var actionId = payload.actionId;
        var _async = payload.async;
        var actionArgs = payload.actionArgs;
        var error = payload.error;


        var _handler = this._handlers[actionId];
        var _asyncHandler = this._asyncHandlers[actionId] && this._asyncHandlers[actionId][_async];

        if (_async) {
          switch (_async) {
            case "begin":
              if (typeof _asyncHandler === "function") {
                this._performHandler.apply(this, [_asyncHandler].concat(actionArgs));
              }
              return;
            case "failure":
              if (typeof _asyncHandler === "function") {
                this._performHandler(_asyncHandler, error);
              }
              return;
            case "success":
              if (typeof _asyncHandler === "function") {
                _handler = _asyncHandler;
              }
              break;
            default:
              return;
          }
        }

        if (typeof _handler !== "function") {
          return;
        }this._performHandler(_handler, body);
      },
      writable: true,
      configurable: true
    },
    _performHandler: {
      value: function _performHandler(_handler) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        this._isHandlingDispatch = true;
        this._pendingState = this._assignState(undefined, this.state);
        this._emitChangeAfterHandlingDispatch = false;

        try {
          _handler.apply(this, args);
        } finally {
          if (this._emitChangeAfterHandlingDispatch) {
            this.state = this._pendingState;
            this.emit("change");
          }

          this._isHandlingDispatch = false;
          this._pendingState = undefined;
          this._emitChangeAfterHandlingDispatch = false;
        }
      },
      writable: true,
      configurable: true
    }
  });

  return Store;
})(EventEmitter);

module.exports = Store;


function ensureActionId(actionOrActionId) {
  return typeof actionOrActionId === "function" ? actionOrActionId._id : actionOrActionId;
}
//# sourceMappingURL=data:application/json;base64,