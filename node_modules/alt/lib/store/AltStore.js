'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _eventemitter3 = require('eventemitter3');

var _eventemitter32 = _interopRequireDefault(_eventemitter3);

var _esSymbol = require('es-symbol');

var _esSymbol2 = _interopRequireDefault(_esSymbol);

var _symbolsSymbols = require('../symbols/symbols');

var Sym = _interopRequireWildcard(_symbolsSymbols);

var _utilsFunctions = require('../../utils/functions');

var fn = _interopRequireWildcard(_utilsFunctions);

// event emitter instance
var EE = (0, _esSymbol2['default'])();

var AltStore = (function () {
  function AltStore(alt, model, state, StoreModel) {
    var _this = this;

    _classCallCheck(this, AltStore);

    this[EE] = new _eventemitter32['default']();
    this[Sym.LIFECYCLE] = model[Sym.LIFECYCLE];
    this[Sym.STATE_CONTAINER] = state || model;

    this.preventDefault = false;
    this._storeName = model._storeName;
    this.boundListeners = model[Sym.ALL_LISTENERS];
    this.StoreModel = StoreModel;

    var output = model.output || function (x) {
      return x;
    };

    this.emitChange = function () {
      _this[EE].emit('change', output.call(model, _this[Sym.STATE_CONTAINER]));
    };

    var handleDispatch = function handleDispatch(f, payload) {
      try {
        return f();
      } catch (e) {
        if (model[Sym.HANDLING_ERRORS]) {
          _this[Sym.LIFECYCLE].emit('error', e, payload, _this[Sym.STATE_CONTAINER]);
          return false;
        } else {
          throw e;
        }
      }
    };

    fn.assign(this, model[Sym.PUBLIC_METHODS]);

    // Register dispatcher
    this.dispatchToken = alt.dispatcher.register(function (payload) {
      _this.preventDefault = false;
      _this[Sym.LIFECYCLE].emit('beforeEach', payload, _this[Sym.STATE_CONTAINER]);

      var actionHandler = model[Sym.LISTENERS][payload.action] || model.otherwise;

      if (actionHandler) {
        var result = handleDispatch(function () {
          return actionHandler.call(model, payload.data, payload.action);
        }, payload);

        if (result !== false && !_this.preventDefault) _this.emitChange();
      }

      if (model.reduce) {
        handleDispatch(function () {
          model.setState(model.reduce(_this[Sym.STATE_CONTAINER], payload));
        }, payload);

        if (!_this.preventDefault) _this.emitChange();
      }

      _this[Sym.LIFECYCLE].emit('afterEach', payload, _this[Sym.STATE_CONTAINER]);
    });

    this[Sym.LIFECYCLE].emit('init');
  }

  _createClass(AltStore, [{
    key: 'getEventEmitter',
    value: function getEventEmitter() {
      return this[EE];
    }
  }, {
    key: 'listen',
    value: function listen(cb) {
      var _this2 = this;

      this[EE].on('change', cb);
      return function () {
        return _this2.unlisten(cb);
      };
    }
  }, {
    key: 'unlisten',
    value: function unlisten(cb) {
      if (!cb) throw new TypeError('Unlisten must receive a function');
      this[Sym.LIFECYCLE].emit('unlisten');
      this[EE].removeListener('change', cb);
    }
  }, {
    key: 'getState',
    value: function getState() {
      return this.StoreModel.config.getState.call(this, this[Sym.STATE_CONTAINER]);
    }
  }]);

  return AltStore;
})();

exports['default'] = AltStore;
module.exports = exports['default'];