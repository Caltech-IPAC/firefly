ext {

  apache_lib = [':commons-fileupload',
                     ':commons-io-2.4',
                     ':commons-httpclient',
                     ':commons-codec',
                     ':commons-lang',
                     ':commons-logging',
                     ':jackrabbit-webdav-2.8.0',
                     ':commons-discovery',
                     ':commons-csv-1.0-201209']

  webservices_lib = [':archive_dto_irsa',
                     ':axis',
                     ':archive_dto_votable',
                     ':xbean']

  ehcache_lib = [':ehcache-2.7.4',
                 ':slf4j-api-1.6.6',
                 ':ehcache-web-2.0.4']

  j2ee_rt_lib = [':wsdl4j-1.5.1',
                 ':jaxrpc',
                 ':saaj',
                 ':activation',
                 ':mail']

  j2ee_lib = [j2ee_rt_lib,
              ':servlet-api',
              ':websocket-api']

  db_lib = [':h2-1.4.194', ':sqlite-jdbc-3.20.0', ':hsqldb-2.4.0']
  mysql_lib = ':mysql-connector-java-5.1.6-bin'
  starlink_lib = [':rayreg',
                  ':starlink-registry-1.2+2016.05.03',
                  ':jcdf-1.2.2',
                  ':eag-healpix-2017.02.26',
                  ':ndx', ':mirage', ':gbin',
                  ':vecmath-1.5.2',
                  ':commons-compress-1.13',
                  ':starlink-pal-1.0.1+2016.08.11',
                  ':starlink-cdf-1.0+2017.01.04',
                  ':starlink-connect-0.1+2016.05.03',
                  ':starlink-fits-0.1+2017.03.29',
                  ':starlink-table-3.2',
                  ':starlink-util-1.0+2017.03.17',
                  ':starlink-votable-2.0+2016.12.22']
  reflections_lib = [':reflections-0.9.11', ':javassist-3.21.0-GA', ':guava-20.0']
  spring_lib = [':spring-beans', ':spring-core', ':spring-jdbc', ':spring-tx', ':spring-web']
  fits_io_lib = [':fits_io']
  junit_lib = [':junit-4.12', ':hamcrest-core-1.3']
  log4j_lib = ':log4j-1.2.14'
  josso_lib = ':josso-ws-1.8.5'
  oidc_lib = [':nimbus-jose-jwt-4.37.1', ':json-smart-2.3', ':accessors-smart-1.2' ]
  json_lib = ':json-simple-1.1.1'
  xstream_lib = [':xstream-1.3.1', ':xpp3_min-1.1.4c']
  gwt_lib_rt = [':gwt-servlet', ':gwt-servlet-deps']
  gwt_lib = [ gwt_lib_rt,
             ':gwt-dev',
             ]

  firefly_ext_lib = [ ':simbad_ws' ]

  firefly_lib = [ firefly_ext_lib, ':firefly' ]


  FIREFLY_RUNTIME = [':firefly_data'] + fits_io_lib + apache_lib + spring_lib + webservices_lib + oidc_lib +
                     log4j_lib + josso_lib + xstream_lib + reflections_lib +
                     gwt_lib_rt + ehcache_lib + starlink_lib + j2ee_rt_lib + json_lib + db_lib

  FIREFLY_COMPILE = j2ee_lib + gwt_lib + FIREFLY_RUNTIME
}


dependencies {
  compile fits_io_lib
  compile FIREFLY_COMPILE
  testCompile junit_lib
}

def libPath = "$fireflyPath/jars"

//project.ext.properties.each{ k, v -> println "${k}:${v}\n" }

repositories {
  flatDir {
    name 'firefly_repo'
    dirs  "$libPath/build",
          "$libPath/data",
          "$libPath/ehcache",
          "$libPath/fits-io",
          "$libPath/j2ee",
          "$libPath/gwt",
          "$libPath/gwt-incubator",
          "$libPath/jakarta-commons",
          "$libPath/josso",
          "$libPath/oidc",
          "$libPath/json",
          "$libPath/log4j",
          "$libPath/db",
          "$libPath/mysql",
          "$libPath/reflections",
          "$libPath/sdss",
          "$libPath/spring",
          "$libPath/starlink",
          "$libPath/test",
          "$libPath/webservices",
          "$libPath/xstream"
  }
}

jar.destinationDir = file ("$rootDir/jars/build")

clean {
  doLast {
    project.delete "${jar.destinationDir}/${jar.baseName}.jar"
  }
}

task buildClient (dependsOn: loadConfig) {
  description= 'Build JavaScript portion of the application.'
  group = MISC_GROUP

  outputs.dir "${buildDir}/war"
  inputs.dir "${projectDir}/js"
  inputs.dir "${fireflyPath}/src/firefly/js"

  doLast {
    if (!file("webpack.config.js").exists()) {
      println ">> webpack.config.js not found.  Skipping buildClient."
      throw new StopExecutionException("webpack.config.js not found.  Skipping buildClient.")
    }
    def res = project.ext.NODE 'yarn', 'run', 'build', "--", "--env.baseWarName=${webapp.baseWarName}", "--env.app-name=${project.ext["app-name"]}"
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to build Client")
    }
  }
}

task buildJsDoc (dependsOn: loadConfig) {
  description= 'Build JSDoc.'
  group = MISC_GROUP

  def outdir = "${buildDir}/war"

  outputs.dir outdir
  inputs.dir "${projectDir}"
  inputs.dir "${fireflyPath}/docs"
  inputs.dir "${fireflyPath}/src/firefly"

  doLast {
    // copy sources to jsdocs build directory
    copy {
      from ("${fireflyPath}/src/firefly") {include "js/**"}
      from ("${fireflyPath}/src/firefly/jsdoc_config.json")
      into "${buildDir}/jsdocs/"
    }
    // copy md files to jsdocs build directory replacing .md links to tutorial
    copy {
      from ("${fireflyPath}") {include "docs/*"}
      into "${buildDir}/jsdocs/"
      filter{
        // replace md's link to point to docstrap's tutorial.  ie   [a link](a_file.md) -> [a link](tutorial-a_file.html)
        String line -> line.replaceAll("(\\[.+\\])\\s*\\((.*)\\.md\\)", "\$1(tutorial-\$2.html)")
      }
    }
    // setup tutorials
    copy {
      from ("${fireflyPath}/docs") {
        include 'firefly-api-code-examples.md', 'firefly-external-task-launcher.md', 'fits-plotting-parameters.md'
      }
      into "${buildDir}/jsdocs/tutorial"
      filter{
          // replace md's link to point to docstrap's tutorial.  ie   [a link](a_file.md) -> [a link](tutorial-a_file.html)
        String line -> line.replaceAll("(\\[.+\\])\\s*\\((.*)\\.md\\)", "\$1(tutorial-\$2.html)")
      }
    }
    // copy files referenced by files in ./docs
    copy {
      from ("${fireflyPath}/docs") {
        include 'firefly-api-code-examples.md', 'fits-plotting-parameters.md'
      }
      into "${outdir}/docs/js"
    }

    if (!file("jsdoc_config.json").exists()) {
      println ">> jsdoc_config.json not found.  Skipping buildJsDoc."
      throw new StopExecutionException("jsdoc_config.json not found.  Skipping buildJsDoc.")
    }
    def res = exec {
      workingDir = "${buildDir}/jsdocs/"
      commandLine "${fireflyPath}/node_modules/.bin/jsdoc", '-c', "${buildDir}/jsdocs/jsdoc_config.json", '-d', "${outdir}/docs/js"
    }
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to build Client")
    }
  }
}

task publishJsDocs (dependsOn: loadConfig) {
  description = 'Publish js docs to firefly.lsst.io'
  group = MISC_GROUP

  def docsDir = "${buildDir}/war/docs/js"
  doLast {
    def res = project.ext.publishDocs docsDir, 'firefly'
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to publishJsDoc")
    }
  }
}

task publishPythonDocs (dependsOn: loadConfig) {
  description = 'Publish python docs to firefly_client.lsst.io'
  group = MISC_GROUP

  def docsDir = "${buildDir}/war/docs/python"
  doLast {
    def res = project.ext.publishDocs docsDir, 'firefly_client'
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to publishJsDoc")
    }
  }
}


task dockerImage (dependsOn: loadConfig) {
  description = 'Create a docker image'
  group = MISC_GROUP

  ext.docker_repo = "ipac/firefly"
  ext.docker_registry = ''
  ext.docker_tag = 'latest'
  ext.copy_res = true

  doLast {
    // copy artifacts to staging directory
    if (copy_res) {
      copy {
        from ("${project.distDir}") { include '*.war' }
        from ("${fireflyPath}/docker/base") { include '*' }
        into "${buildDir}/docker"
      }
    }

    try {
      "docker --version".execute()
    } catch (Exception e) {
      println ">> docker is not installed.  This task required docker"
      throw new GradleException("docker is not installed.  This task required docker", e)
    }

    if (!file("${buildDir}/docker/Dockerfile").exists()) {
      println ">> Dockerfile not found. Fail to create docker image"
      throw new GradleException("Dockerfile not found. Fail to create docker image")
    }

    docker_repo = project.appConfigProps.docker_repo ?: docker_repo
    docker_tag = project.appConfigProps.docker_tag ?: docker_tag
    docker_registry = project.appConfigProps.docker_registry ?: docker_registry
    docker_registry = docker_registry == '' || docker_registry.endsWith('/') ? docker_registry : docker_registry + '/'

    def res = exec {
      workingDir "${buildDir}/docker"
      commandLine "docker build --pull -t ${docker_registry}${docker_repo}:${docker_tag} --build-arg IMAGE_NAME=${docker_registry}${docker_repo} .".split(' ')
    }
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to create docker image")
    }
    return res;
  }
}

task dockerPublish (dependsOn: dockerImage) {
  description = 'Create a docker image'
  group = MISC_GROUP

  doLast {

    try {
      "docker --version".execute()
    } catch (Exception e) {
      println ">> docker is not installed.  This task required docker"
      throw new GradleException("docker is not installed.  This task required docker", e)
    }

    if (project.appConfigProps.docker_user != '') {
      def proc = "docker login --username ${project.appConfigProps.docker_user} --password ${project.appConfigProps.docker_passwd}".execute()
      proc.waitForOrKill(10000)
      println ">> docker login as ${project.appConfigProps.docker_user} with exit status ${proc.exitValue()}"
    }

    def docker_repo = project.appConfigProps.docker_repo ?: dockerImage.docker_repo
    def docker_tag = project.appConfigProps.docker_tag ?: dockerImage.docker_tag
    def docker_registry = project.appConfigProps.docker_registry ?: dockerImage.docker_registry
    docker_registry = docker_registry == '' || docker_registry.endsWith('/') ? docker_registry : docker_registry + '/'

    def res = exec {
      workingDir "${buildDir}/docker"
      commandLine "docker push ${docker_registry}${docker_repo}:${docker_tag}".split(' ')
    }
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to push docker image")
    }
    return res;
  }
}

/**
 * this function setup node.js environment then run the given command.
 */
ext.NODE = { ...cmd ->
  def wpBuildDir = "${buildDir}/war"

  try {
    def process = "yarn version".execute()
  } catch (Exception e) {
    println ">> Task failed due to missing yarn package manager which comes bundled with node.js"
    throw new GradleException("Task failed due to missing yarn package manager which comes bundled with node.js", e)
  }

  if (file("${rootDir}/package.json").exists()) {
    exec {
      workingDir = rootDir
      executable "yarn"
      args "install", "--frozen-lockfile"
    }
  }

  def versionInfo = new Properties()
  def versionFile = file("${project.buildDir}/version.tag")
  if (versionFile.exists()) {
    versionFile.withInputStream { versionInfo.load(it) }
  }

  // any environment starting with '__$' will be defined as global.
  // this is a way send config info to JS code.
  def res = exec {
    environment 'WP_BUILD_DIR': wpBuildDir
    environment 'NODE_ENV': (project.env == 'local' ? 'development' : 'production')
    environment 'BUILD_ENV': project.env
    commandLine cmd
    for (String key : project.appConfigProps.keySet()) {
      if (key.startsWith('__$')) {
        environment (key, project.appConfigProps[key])
        println ">>   " + key + " = " + project.appConfigProps[key]
      }
    }
    // load version info as JS global
    for (String key : versionInfo.keySet()) {
      environment ('__$version.'+key, versionInfo[key])
      println ">>   " + '__$version.'+key + " = " + versionInfo[key]
    }
  }
  return res;
}

/**
 * Publish docs to lsst.io
 */
ext.publishDocs = { docsDir, product ->

  def branch = System.env.BRANCH ?: "master"
  docsDir = docsDir ?: "${buildDir}/gwt/${project['app-name']}/docs"
  product = product ?: "firefly"

  if (!file(docsDir).exists()) {
    println ">> docs directory does not exists.  Skipping publishDocs."
    throw new StopExecutionException("docs directory does not exists.  Skipping publishDocs.")
  }

  try {
    "ltd-mason-travis -h".execute()
  } catch (Exception e) {
    println ">> ltd-mason-travis is not installed.  Task cannot continue."
    throw new GradleException("ltd-mason-travis is not installed.  Task cannot continue.\"", e)
  }

  def res = exec {
              environment 'LTD_MASON_BUILD': 'true'
              environment 'LTD_MASON_PRODUCT': product
              environment 'LTD_MASON_AWS_ID': 'AKIAJRVDEID2GE6GLL7Q'
              environment 'LTD_MASON_AWS_SECRET': project.appConfigProps['LTD_MASON_AWS_SECRET']
              environment 'LTD_KEEPER_URL': 'https://keeper.lsst.codes'
              environment 'LTD_KEEPER_USER': 'firefly'
              environment 'LTD_KEEPER_PASSWORD': project.appConfigProps['LTD_KEEPER_PASSWORD']
              environment 'TRAVIS_PULL_REQUEST': 'false'
              environment 'TRAVIS_REPO_SLUG': 'Caltech-IPAC/firefly'
              environment 'TRAVIS_BRANCH': branch
              commandLine "ltd-mason-travis", "--html-dir", docsDir
            }
  return res
}
