
def stopTomcat(remoteHost) {
  def desc = execCmd (remoteHost, true, ["/etc/init.d/tomcat_init", "stop"])
  println ">> Stopping Tomcat:.. $desc"
}

def startTomcat(remoteHost) {
  def cmd = ["/etc/init.d/tomcat_init", "start"];
//  if (project.hasProperty("tomcatDebugStart") && project.tomcatDebugStart == 'true') {
//    cmd = cmd + "jpda"
//  }

  def desc = execCmd (remoteHost, false, cmd)
  println ">> Starting Tomcat:.. $cmd ==> $desc"
}

task deployAllWars(dependsOn: loadConfig) {
  description= 'Deploy all of the built war files to Tomcat.  Require ${tomcat_home} property.  May include ${remoteHost} as well.'
  group = MISC_GROUP

  doLast {
    if (!project.hasProperty("tomcat_home")) {
      throw ProjectConfigurationException("tomcat_home property is not found.")
    }

    def remoteHosts = project.hasProperty("remoteHost") ? remoteHost.split(",") : [null]

    for (rhost in remoteHosts) {

      println ">> deploying to host: $rhost"

      // stop tomcat
      stopTomcat(rhost)

      execCmd(rhost, true, ["rm", "-r", "$tomcat_home/temp/ehcache"])

      // copy all of the war files
      def wars = fileTree(dir: "${project.buildRoot}/libs", include: '*.war')
      wars.each { File file ->
        copyWar(file, rhost)
      }

      // start tomcat
      startTomcat(rhost)
    }
  }
}

def copyWar(file, remoteHost) {
  println ">> copying file: $file"

  def baseName = file.name.tokenize('.')[0]
  execCmd(remoteHost, true, ["rm", "-r","$tomcat_home/webapps/$baseName"])

  if (remoteHost != null) {
    exec {
      executable "scp"
      args "$file"
      args "$remoteHost:/$tomcat_home/webapps/"
    }
  } else {
    copy {
      from("$file")
      into "$tomcat_home/webapps/"
    }
  }
}

def execCmd(remoteHost, ignoreFailure, cmdLine) {
  exec {
    setIgnoreExitValue(ignoreFailure)
    executable "ssh"
    if (remoteHost != null) {
      args "$remoteHost"
    } else {
      args "localhost"
    }
    cmdLine.each { arg ->
      if (arg.contains("#")) {
        args arg.replaceAll('\\#', '\\\\#')
      } else {
        args arg
      }
    }

    logger.info( ">> execCmd: $commandLine" )
  }
}


