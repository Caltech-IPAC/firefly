apply plugin: 'war'
apply from: "$fireflyPath/buildScript/gwt.gincl"

def WEBAPP_GROUP = "Webapp"


jar {
  baseName = "${project['app-name']}"
  include "edu/caltech/ipac/${project.projectDir.name}/**/*"
  from sourceSets.main.allJava
  enabled = true

  manifest {
    attributes(["properties-dir": "edu/caltech/ipac/${project.projectDir.name}/resources"],"webapp-properties")
    attributes(["hasSearchProcessors": "true"],"hasSearchProcessors")
  }
}

sourceSets {
  main.java.srcDir  "java/"
  main.resources {
    srcDir "java/"
    include "edu/caltech/ipac/${project.projectDir.name}/**/resources/*"
    include "edu/caltech/ipac/${project.projectDir.name}/*.xml"
    exclude "**/*.gradle"
  }
}

configurations {
  webappLib {
    description = 'web app runtime dependencies.'
  }
}

dependencies {
  compile firefly_lib
  webappLib FIREFLY_RUNTIME + firefly_lib + ":$jar.baseName"
}

task prepareWebapp (type:Copy) {
  dependsOn gwt, loadConfig
  description= 'Generates the configuration files needed by the webapp, ie. app.prop, web.xml, etc.'
  group = WEBAPP_GROUP

  from("$rootDir/config/") {
    include 'common.prop', '*.xml', 'ignore_sizeof.txt', 'log4j.properties'
    into 'WEB-INF/config'
  }
  from("$rootDir/config/") {
    include 'logging.properties'
    into 'WEB-INF/classes'
  }
  from("$rootDir/config") {
    include "context.xml"
    into 'META-INF'
  }
  // override context.xml if present
  from("config/") {
    include "context.xml"
    into 'META-INF'
  }
  from("config/web.xml") {
    into "WEB-INF"
  }
  from("config/") {
    exclude "web.xml"
    into 'WEB-INF/config'
  }

  // translate the *.html files.
  from("html/") {
    include "*.html"
  }
  into gwt.warDir

  doFirst {
    // copy the content of html to war
    copy {
      from ("html/") { include '**/*' }
      into gwt.warDir
    }

    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
  }
  doLast {
    // generate version tag
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def type = appConfigProps.get('BuildType')
    def buildNum = appConfigProps.get('BuildNumber')

    def tag = "$major.$minor.${rev}_${type}-$buildNum"
    def props = new Properties();
    props.setProperty('tag', tag)
    props.store(file("${project.buildDir}/version.tag").newWriter(), "Version Info")
  }
}
loadConfig.mustRunAfter gwt


task webapp {
  outputs.upToDateWhen { false }
  ext.baseWarName = jar.baseName
}

task buildClient {
  dependsOn loadConfig

  outputs.upToDateWhen { false }

  doLast {

    try {
      def process = "node -v".execute()
    } catch (Exception e) {
        println ">> node.js not found.  Skipping buildClient."
        throw new StopExecutionException("node.js not found.  Skipping buildClient.")
    }

    if (!file("webpack.config.js").exists()) {
      println ">> webpack.config.js not found.  Skipping buildClient."
      throw new StopExecutionException("webpack.config.js not found.  Skipping buildClient.")
    }

    exec {
      executable "$fireflyPath/node_modules/webpack/bin/webpack.js"
      args "-d"
    }
    copy {
      from("html/tmp-stuff/")
      into gwt.warDir
    }
  }
}

war {
  dependsOn webapp, jar, gwtCompile, buildClient, prepareWebapp
  description= 'Build application. Creates a war file.'
  group = WEBAPP_GROUP

  doFirst {
    archiveName = "${webapp.baseWarName}.war"

  }
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
}
prepareWebapp.mustRunAfter buildClient
buildClient.mustRunAfter gwtCompile

task dirty (type: War) {
  dependsOn webapp, jar, prepareWebapp
  description= 'Create a war without GWT compile.  This is much faster.'
  group = WEBAPP_GROUP

  doFirst {
    archiveName = "${webapp.baseWarName}.war"
  }
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
}

task deployClient  {
  dependsOn loadConfig, buildClient, webapp
  description= 'Build and deploy the JavaScript client only.  Require ${tomcat_home} property'
  group = WEBAPP_GROUP

  doLast {
    copy {
      from(gwt.warDir) {
        include "**/*"
        exclude "WEB-INF"
        exclude "META-INF"
      }
      into "${tomcat_home}/webapps/${webapp.baseWarName}"
    }
  }
}

task deploy {
  dependsOn loadConfig, webapp
  description= 'Deploy webapp(war file) to Tomcat.  Require ${tomcat_home} property'
  group = WEBAPP_GROUP

  doLast {

    if (!project.hasProperty("tomcat_home")) {
      throw ProjectConfigurationException("tomcat_home property is not found.")
    }
//    exec {
//      ignoreExitValue = 'true'
//      executable "$tomcat_home/bin/shutdown.sh"
//      println ">> Stopping Tomcat:.. tomcat_home: $tomcat_home"
//      errorOutput = new ByteArrayOutputStream()
//    }
//    sleep(4 * 1000)

    copy {
      println ">> deploying file:$war.destinationDir/${webapp.baseWarName}.war"
      delete("$tomcat_home/webapps/${webapp.baseWarName}")
      from("$war.destinationDir/${webapp.baseWarName}.war")
      into "$tomcat_home/webapps/"
    }

//    exec {
//      delete("$tomcat_home/temp/ehcache")
//      executable "$tomcat_home/bin/catalina.sh"
//      if (project.hasProperty("tomcatDebugStart") && project.tomcatDebugStart == 'true') {
//        args 'jpda'
//      }
//      args 'start'
//      println ">> Starting Tomcat:.."
//    }
  }
}

task buildAndPublish << {
  description= 'Build the war file and then publish it to a remote host. Property ${publish_host} is required'
  group = WEBAPP_GROUP

  if (!file(war.archivePath).exists()) {
    throw new StopExecutionException("$war.archivePath not found.  Skipping sendArtifacts.")
  }
  if (!project.hasProperty("publish_host")) {
    throw new StopExecutionException("publish_host not found.  Skipping sendArtifacts.")
  }

  def rhost = project.property("publish_host")
  def reposRoot = "/hydra/repos/${project['app-name']}"
  def major = appConfigProps.get('BuildMajor')
  def minor = appConfigProps.get('BuildMinor')
  def rev = appConfigProps.get('BuildRev')
  def buildNum = appConfigProps.get('BuildNumber')
  def dirName = "v$major.$minor.$rev.$buildNum"

  exec {
    commandLine "ssh", "$rhost", "mkdir -p $reposRoot/$dirName/"
  }
  exec {
    commandLine "scp", "$war.archivePath", "$rhost:$reposRoot/$dirName/"
  }
  exec {
    commandLine "ssh", "$rhost", "cd $reposRoot; rm current; ln -s $dirName current"
  }
}
buildAndPublish.dependsOn war



