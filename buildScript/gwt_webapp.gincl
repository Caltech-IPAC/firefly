apply plugin: 'war'
apply from: "$fireflyPath/buildScript/gwt.gincl"

def WEBAPP_GROUP = "Webapp"


jar {
  baseName = "${project['app-name']}"
  include "edu/caltech/ipac/${project.projectDir.name}/**/*"
  from sourceSets.main.allJava
  enabled = true

  manifest {
    attributes(["properties-dir": "edu/caltech/ipac/${project.projectDir.name}/resources"],"webapp-properties")
    attributes(["hasSearchProcessors": "true"],"hasSearchProcessors")
  }
}

sourceSets {
  main.java.srcDir  "$rootDir/java/src/"
  main.resources {
    srcDir "$rootDir/java/src/"
    include "edu/caltech/ipac/${project.projectDir.name}/resources/*.*"
    exclude "**/*.gradle"
  }
}

configurations {
  webappLib {
    description = 'web app runtime dependencies.'
  }
}

dependencies {
  compile firefly_lib
  webappLib FIREFLY_RUNTIME + firefly_lib + ":$jar.baseName"
}

task prepareWebapp (type:Copy) {
  dependsOn gwt, loadConfig
  description= 'Generates the configuration files needed by the webapp, ie. app.prop, web.xml, etc.'
  group = WEBAPP_GROUP

  from("$rootDir/config/") {
    include 'common.prop', '*.xml', 'ignore_sizeof.txt', 'log4j.properties'
    into 'WEB-INF/config'
  }
  from("$rootDir/config/") {
    include 'logging.properties'
    into 'WEB-INF/classes'
  }
  from("$rootDir/config") {
    include "context.xml"
    into 'META-INF'
  }
  from("web.xml") {
    into "WEB-INF"
  }
  from("public/") {
    include "*.html"
  }
  into gwt.warDir

  doFirst {
    from("$rootDir/config/$gwt.linkedDirName") {
      include "configurable/*.xml"
      include "*.prop", "*.dtd", "*.config"
      into 'WEB-INF/config'
    }
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
  }
  doLast {
    // generate version tag
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def type = appConfigProps.get('BuildType')
    def buildNum = appConfigProps.get('BuildNumber')

    def tag = "$major.$minor.$rev $type-$buildNum"
    def props = new Properties();
    props.setProperty('tag', tag)
    props.store(file("${project.buildDir}/version.tag").newWriter(), "Version Info")
  }
}

task webapp {
  outputs.upToDateWhen { false }
  ext.baseWarName = jar.baseName
}

war {
  dependsOn webapp, jar, gwtCompile, prepareWebapp
  description= 'Build application. Creates a war file.'
  group = WEBAPP_GROUP

  doFirst {
    archiveName = "${webapp.baseWarName}.war"

  }
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
}
prepareWebapp.mustRunAfter gwtCompile

task dirty (type: War) {
  dependsOn webapp, jar, prepareWebapp
  description= 'Create a war without GWT compile.  This is much faster.'
  group = WEBAPP_GROUP

  doFirst {
    archiveName = "${webapp.baseWarName}.war"
  }
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
}

task deploy {
  dependsOn loadConfig, webapp
  description= 'Deploy webapp(war file) to Tomcat.  Require ${tomcat_home} property'
  group = WEBAPP_GROUP

  doLast {

    if (!project.hasProperty("tomcat_home")) {
      throw ProjectConfigurationException("tomcat_home property is not found.")
    }
    exec {
      ignoreExitValue = 'true'
      executable "$tomcat_home/bin/shutdown.sh"
      println ">> Stopping Tomcat:.. tomcat_home: $tomcat_home"
      errorOutput = new ByteArrayOutputStream()
    }
    sleep(4 * 1000)

    copy {
      println ">> deploying file:$war.destinationDir/${webapp.baseWarName}.war"
      delete("$tomcat_home/webapps/${webapp.baseWarName}")
      from("$war.destinationDir/${webapp.baseWarName}.war")
      into "$tomcat_home/webapps/"
    }

    exec {
      delete("$tomcat_home/temp/ehcache")
      executable "$tomcat_home/bin/catalina.sh"
      if (project.hasProperty("tomcatDebugStart") && project.tomcatDebugStart == 'true') {
        args 'jpda'
      }
      args 'start'
      println ">> Starting Tomcat:.."
    }
  }
}
