def WEBAPP_GROUP = "Webapp"

apply plugin: 'war'
apply from: "$fireflyPath/buildScript/gwt.gincl"
apply from: "$fireflyPath/buildScript/utils.gincl"

jar {
  baseName = "${project['app-name']}"
  include "edu/caltech/ipac/${project.projectDir.name}/**/*"
  from sourceSets.main.allJava
  enabled = true

  manifest {
    attributes(["properties-dir": "edu/caltech/ipac/${project.projectDir.name}/resources"],"webapp-properties")
    attributes(["hasSearchProcessors": "true"],"hasSearchProcessors")
  }
}

sourceSets {
  main.java.srcDir  "java/"
  main.resources {
    srcDir "java/"
    include "edu/caltech/ipac/${project.projectDir.name}/**/resources/*"
    include "edu/caltech/ipac/${project.projectDir.name}/*.xml"
    exclude "**/*.gradle"
  }
  test.java.srcDir  "test/"
}

test {

  // set a system property for the test JVM(s)
  systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  include 'edu/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }

}

configurations {
  webappLib {
    description = 'web app runtime dependencies.'
  }
}

dependencies {
  compile firefly_lib
  webappLib FIREFLY_RUNTIME + firefly_lib + ":$jar.baseName"
}

task prepareWebapp (type:Copy, dependsOn: [gwt, loadConfig, createVersionTag]) {
  description= 'Generates the configuration files needed by the webapp, ie. app.prop, web.xml, etc.'
  group = WEBAPP_GROUP

  // should rerun this everytime.  properties could be modified from external files.
  outputs.upToDateWhen { false }

  from("$rootDir/config/") {
    include '*.prop', '*.xml', 'ignore_sizeof.txt', '*.properties'
    into 'WEB-INF/config'
  }
  from("$rootDir/config/") {
    include 'logging.properties'
    into 'WEB-INF/classes'
  }
  from("$rootDir/config") {
    include "context.xml"
    into 'META-INF'
  }
  // override context.xml if present
  from("config/") {
    include "context.xml"
    into 'META-INF'
  }
  from("config/web.xml") {
    into "WEB-INF"
  }
  from("config/") {
    exclude "web.xml"
    into 'WEB-INF/config'
  }

  // translate the *.html files.
  from("html/") {
    include "*.html"
  }
  into gwt.warDir

  doFirst {
    // copy the content of html to war
    copy {
      from ("html/") { include '**/*' }
      into gwt.warDir
    }
    copy {
      from { // use of closure defers evaluation until execution time
        configurations.webappLib
      }
      into "${gwt.warDir}/WEB-INF/lib"
    }

    // temporary solution to take in javascript built by firefly
    copy {
      from ("$fireflyPath/jars/build/") { include '*.js*' }
      from ("$rootDir/jars/build/") { include '*.js*' }
      into gwt.warDir
    }

    if (project.appConfigProps["ehcache.replicate"] && !project.appConfigProps["ehcache.replicate"].toBoolean()) {
      exclude "ehcache.xml"
    }

    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
  }
}


task webapp {
  outputs.upToDateWhen { false }
  ext.baseWarName = jar.baseName
}

war {
  description= 'Build application. Creates a war file.'
  group = WEBAPP_GROUP

  dependsOn webapp, jar, gwtCompile, buildClient, prepareWebapp
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
  destinationDir = file("${rootDir}/build/libs")

  doFirst {
    archiveName = "${webapp.baseWarName}.war"
  }
}

task dirty (type: War, dependsOn: [webapp, jar, prepareWebapp]) {
  description= 'Create a war without GWT compile.  This is much faster.'
  group = WEBAPP_GROUP

  doFirst {
    archiveName = "${webapp.baseWarName}.war"
  }
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
}

task deployClient(dependsOn: [loadConfig, buildClient, webapp])  << {
  description= 'Build and deploy the JavaScript client only.  Require ${tomcat_home} property'
  group = WEBAPP_GROUP

  copy {
    from(gwt.warDir) {
      include "**/*"
      exclude "WEB-INF"
      exclude "META-INF"
    }
    into "${tomcat_home}/webapps/${webapp.baseWarName}"
  }
}

task deploy (dependsOn: [loadConfig, webapp]) << {
  description= 'Deploy webapp(war file) to Tomcat.  Require ${tomcat_home} property'
  group = WEBAPP_GROUP

  if (!project.hasProperty("tomcat_home")) {
    throw ProjectConfigurationException("tomcat_home property is not found.")
  }
  if (!file("$war.destinationDir/${webapp.baseWarName}.war").exists()) {
    println ">> ${webapp.baseWarName}.war not found.  Skipping deploy."
    throw new StopExecutionException("${webapp.baseWarName}.war not found.  Skipping deploy.")
  }

  copy {
    println ">> deploying file:$war.destinationDir/${webapp.baseWarName}.war"
    delete("$tomcat_home/webapps/${webapp.baseWarName}")
    from("$war.destinationDir/${webapp.baseWarName}.war")
    into "$tomcat_home/webapps/"
  }
}

task buildAndDeploy( dependsOn:[war, deploy] )
task dirtyAndDeploy( dependsOn:[dirty, deploy] )


task buildAndPublish( dependsOn: war ) << {
  description= 'Build the war file and then publish it to a remote host. Property ${publish_host} is required'
  group = WEBAPP_GROUP

  if (!file(war.archivePath).exists()) {
    throw new StopExecutionException("$war.archivePath not found.  Skipping sendArtifacts.")
  }
  if (!project.hasProperty("publish_host")) {
    throw new StopExecutionException("publish_host not found.  Skipping sendArtifacts.")
  }

  def rhost = project.property("publish_host")
  def reposRoot = "/hydra/repos/${project['app-name']}"
  def major = appConfigProps.get('BuildMajor')
  def minor = appConfigProps.get('BuildMinor')
  def rev = appConfigProps.get('BuildRev')
  def buildNum = appConfigProps.get('BuildNumber')
  def dirName = "v$major.$minor.$rev.$buildNum"

  exec {
    commandLine "ssh", "$rhost", "mkdir -p $reposRoot/$dirName/"
  }
  exec {
    commandLine "scp", "$war.archivePath", "$rhost:$reposRoot/$dirName/"
  }
  exec {
    commandLine "ssh", "$rhost", "cd $reposRoot; rm current; ln -s $dirName current"
  }
}


def getVersionLabel() {
  def major = appConfigProps.get('BuildMajor')
  def minor = appConfigProps.get('BuildMinor')
  def rev = appConfigProps.get('BuildRev')
  def type = appConfigProps.get('BuildType')

  def prefix = project.hasProperty("tag_prefix") ? "${tag_prefix} " : ""
  def label = prefix + "v${major}.${minor}.${rev} ${type}"
  return label;
}

task publishToGithub (dependsOn: loadConfig) {

  outputs.upToDateWhen { false }

  doLast {
    def tag_label = project.ext.createTagLabel();
    def rel_title = getVersionLabel();

    try {
      def process = "node -v".execute()
    } catch (Exception e) {
      println ">> Task failed due to missing node.js"
      throw new GradleException(">> Task failed due to missing node.js", e)
    }

    def relConfig = '{ "tag": "' + tag_label + '"' +
            ', "token": "' + project.property("github.auth.token") + '"' +
            ', "name": "' + rel_title + '"' +
            ', "assets": ["' + "${buildDir}/exec/${webapp.baseWarName}-exec.war" + '"]' +
            "}"

    def res = exec {
      environment 'NODE_PATH': "${fireflyPath}/node_modules"
      executable "node"
      args "${fireflyPath}/buildScript/publish-to-github.js", relConfig
    }
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to build publish to Github.")
    }
  }
}

// ------------------------
// define task order
//-------------------------
loadConfig.mustRunAfter gwt
buildClient.mustRunAfter prepareWebapp
prepareWebapp.mustRunAfter gwtCompile
gwtCompile.mustRunAfter jar
deploy.mustRunAfter war
deploy.mustRunAfter dirty

