apply plugin: 'war'
apply from: "$fireflyPath/buildScript/gwt.gincl"

jar {
  baseName = "${project['app-name']}"
  include "edu/caltech/ipac/${project.projectDir.name}/**/*"
  from sourceSets.main.allJava
  enabled = true

  manifest {
    attributes(["properties-dir": "edu/caltech/ipac/${project.projectDir.name}/resources"],"webapp-properties")
  }
}

sourceSets {
  main.java.srcDir  "java/"
  main.resources {
    srcDir "java/"
    include "edu/caltech/ipac/${project.projectDir.name}/**/resources/*"
    include "edu/caltech/ipac/${project.projectDir.name}/*.xml"
    exclude "**/*.gradle"
  }
  test.java.srcDir  "test/"
}

configurations {
  webappLib {
    description = 'web app runtime dependencies.'
  }
}

task jsTest (dependsOn: [loadConfig]) {
  doLast {
    if (file("package.json").exists()) {
      println ">> running JavaScript test..."
      def res = project.ext.NODE 'yarn', 'run', 'test-unit'
      if (res.getExitValue() != 0) {
        throw new GradleException("JavaScript test fail.")
      }
    }
  }
}

clean {
  description= 'Remove build files from this project'
  group = DEV_GROUP
}


test {
  description= 'Run Java and JavaScript unit test'
  group = DEV_GROUP

  dependsOn loadConfig, jsTest
  // should rerun this everytime.  properties could be modified from external files.
  outputs.upToDateWhen { false }

  workingDir = rootDir

  // explicitly include or exclude tests
  include 'edu/**'

  environment 'contextPath': "/${project['app-name']}"
  environment 'contextName': project['app-name']
  environment 'webappConfigPath': "build/${project['app-name']}/war/WEB-INF/config/"

  if (project.hasProperty("category")) {
    if (project.category) {
      logger.lifecycle("Running test for category: " + project.category)
      useJUnit {
        includeCategories project.category
      }
    }
  } else {
    useJUnit {
      excludeCategories 'edu.caltech.ipac.TestCategory$Perf', 'edu.caltech.ipac.TestCategory$Integration'
    }
  }

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "2g"

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

  doFirst {
    // things needed before test run
    copy {
      from("$fireflyPath/config/test/log4j-test.properties")
      into "${gwt.warDir}/WEB-INF/config"
      rename("log4j-test.properties", "log4j.properties")
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
    }
  }
}

task onlinehelp (dependsOn: [loadConfig]) {
  doLast {
    exec {
      workingDir onlinehelp_dir
      commandLine 'gradle', ":${project['app-name']}:build"
    }

    new File("${gwt.warDir}/onlinehelp").mkdirs()
    copy {
      from zipTree("$onlinehelp_dir/build/dist/${project['app-name']}_help.zip")
      into "${gwt.warDir}/onlinehelp"
    }
  }
}


task prepareWebapp (type:Copy, dependsOn: [gwt, loadConfig, createVersionTag]) {
  description= 'Generates the configuration files needed by the webapp, ie. app.prop, web.xml, etc.'
  group = MISC_GROUP

  // should rerun this everytime.  properties could be modified from external files.
  outputs.upToDateWhen { false }

  from("${buildDir}/version.tag") {
    into 'WEB-INF/config'
  }
  from("$rootDir/config/") {
    include '*.prop', '*.xml', 'ignore_sizeof.txt', '*.properties'
    into 'WEB-INF/config'
  }
  from("$rootDir/config/") {
    include 'logging.properties'
    into 'WEB-INF/classes'
  }
  from("$rootDir/config/web.xml") {
    into "WEB-INF"
  }
  from("$rootDir/config") {
    include "context.xml"
    into 'META-INF'
  }
  // override context.xml if present
  from("config/") {
    include "context.xml"
    into 'META-INF'
  }
  from("config/web.xml") {
    into "WEB-INF"
  }
  from("config/") {
    exclude "web.xml"
    into 'WEB-INF/config'
  }

  // translate the *.html files.
  from("html/") {
    include "*.html"
  }
  into gwt.warDir

  doFirst {
    // copy the content of html to war
    copy {
      from ("html/") { include '**/*' }
      into gwt.warDir
    }

    // to avoid storing multiple copies of plotly library under project html
    // copy minimized plotly from firefly
    copy {
      from ("$fireflyPath/src/firefly/html/") { include 'plotly*min.js' }
      into gwt.warDir
    }

    copy {
      from { // use of closure defers evaluation until execution time
        configurations.webappLib
      }
      into "${gwt.warDir}/WEB-INF/lib"
    }

    // temporary solution to take in javascript built by firefly
    copy {
      from ("$fireflyPath/jars/build/") { include '*.js*' }
      from ("$rootDir/jars/build/") { include '*.js*' }
      into gwt.warDir
    }

    // temporary solution to extract fits_io.jar into WEB-INF/classes directory
    // this fix the multiple nom.tam.fits issue
    copy {
      from zipTree(file("$fireflyPath/jars/fits-io/fits_io.jar"))
      into "${gwt.warDir}/WEB-INF/classes"
    }

    if (project.appConfigProps["ehcache.replicate"] && !project.appConfigProps["ehcache.replicate"].toBoolean()) {
      exclude "ehcache.xml"
    }

    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
  }
  doLast {
    // plotly script load fails if loaded from amd environment
    // with a script tag (as firefly loads it)
    // see DM-11341 for details
    println ">> updating plotly script"
    ant.replaceregexp(match:'\\&\\&define\\.amd', replace:'\\&\\&false', flags:'g', byline:true) {
      fileset(dir: "${buildDir}/war/", includes: 'plotly*min.js')
    }
  }
}


task webapp {
  outputs.upToDateWhen { false }
  ext.baseWarName = jar.baseName
}

war {
  description= 'Build application. Creates a war file.'
  group = MAIN_GROUP

  dependsOn webapp, jar, buildClient, prepareWebapp
  outputs.dir gwt.warDir
  classpath = configurations.webappLib
  from gwt.warDir
  destinationDir = file(project.distDir)

  doFirst {
    archiveName = "${webapp.baseWarName}.war"
  }
}

clean {
  delete "${war.destinationDir}/${webapp.baseWarName}.war"
}

task deploy (dependsOn: [loadConfig, webapp]) {
  description= 'Deploy webapp(war file) to Tomcat.  Require ${tomcat_home} property'
  group = MAIN_GROUP

  doLast {
    if (!project.hasProperty("tomcat_home")) {
      throw ProjectConfigurationException("tomcat_home property is not found.")
    }
    if (!file("$war.destinationDir/${webapp.baseWarName}.war").exists()) {
      println ">> ${webapp.baseWarName}.war not found.  Skipping deploy."
      throw new StopExecutionException("${webapp.baseWarName}.war not found.  Skipping deploy.")
    }

    copy {
      println ">> deploying file:$war.destinationDir/${webapp.baseWarName}.war"
      delete("$tomcat_home/webapps/${webapp.baseWarName}")
      from("$war.destinationDir/${webapp.baseWarName}.war")
      into "$tomcat_home/webapps/"
    }
  }
}

task warAll( dependsOn:[war, buildJsDoc] ) {
  description= 'Build the war file with JSDoc generated.'
  group = MAIN_GROUP
}
task buildAndDeploy( dependsOn:[war, deploy] ) {
  description= 'Build the war file and then deploy it to a local tomcat server if successful. Property ${tomcat_home} is required'
  group = MAIN_GROUP
}
task buildAllAndDeploy( dependsOn:[warAll, deploy] ) {
  description= 'Run test and docs first, then build the war file.  Deploy it to a local tomcat server if successful. Property ${tomcat_home} is required'
  group = MAIN_GROUP
}

task buildAndPublish( dependsOn: war ) {
  description= 'Build the war file and then publish it to a remote host. Property ${publish_host} is required.'
  group = MAIN_GROUP

  doLast {
    if (!file(war.archivePath).exists()) {
      throw new StopExecutionException("$war.archivePath not found.  Skipping sendArtifacts.")
    }
    if (!project.hasProperty("publish_host")) {
      throw new StopExecutionException("publish_host not found.  Skipping sendArtifacts.")
    }

    def rhost = project.property("publish_host")
    def reposRoot = "/hydra/repos/${project['app-name']}"
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def buildNum = appConfigProps.get('BuildNumber')
    def dirName = "v$major.$minor.$rev.$buildNum"

    exec {
      commandLine "ssh", "$rhost", "mkdir -p $reposRoot/$dirName/"
    }
    exec {
      commandLine "scp", "$war.archivePath", "$rhost:$reposRoot/$dirName/"
    }
    exec {
      commandLine "ssh", "$rhost", "cd $reposRoot; rm current; ln -s $dirName current"
    }
  }
}


def getReleaseTitle() {
  def major = appConfigProps.get('BuildMajor')
  def minor = appConfigProps.get('BuildMinor')
  def rev = appConfigProps.get('BuildRev')
  def type = appConfigProps.get('BuildType')

  def prefix = project.hasProperty("rel_prefix") ? "${rel_prefix} " : ""
  def label = prefix + "v${major}.${minor}.${rev} ${type}"
  return label;
}

task publishToGithub (dependsOn: loadConfig) {
  description = 'Publish the built artifacts as a GitHub release.'
  group = MISC_GROUP

  outputs.upToDateWhen { false }

  doLast {
    def tag = project.ext.getVersionInfo('BuildTag');
    def rel_title = getReleaseTitle();

    try {
      def process = "node -v".execute()
    } catch (Exception e) {
      println ">> Task failed due to missing node.js"
      throw new GradleException(">> Task failed due to missing node.js", e)
    }


    def relConfig = sprintf("""
                    |{ "tag": "%s",
                    |  "token": "%s",
                    |  "name": "%s",
                    |  "assets": ["%s", "%s"]
                    |}
                    """.stripMargin(),
                    tag,
                    project.property("github.auth.token"),
                    rel_title,
                    "${buildDir}/exec/${webapp.baseWarName}-exec.war", "${buildDir}/exec/${webapp.baseWarName}.war")
    def res = exec {
      environment 'NODE_PATH': "${fireflyPath}/node_modules"
      executable "node"
      args "${fireflyPath}/buildScript/publish-to-github.js", relConfig
    }
    if (res.getExitValue() != 0) {
      throw new GradleException("Fail to build publish to Github.")
    }
  }
}

// ------------------------
// define task order
//-------------------------
gwt.mustRunAfter   jar
loadConfig.mustRunAfter   gwt
prepareWebapp.mustRunAfter loadConfig
buildClient.mustRunAfter  prepareWebapp
buildJsDoc.mustRunAfter   buildClient
war.mustRunAfter          buildJsDoc
deploy.mustRunAfter       war

