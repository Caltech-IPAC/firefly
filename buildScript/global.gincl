
ext["app-name"] =  name
ext.buildRoot = findProperty("buildRoot") ?: "${rootDir}/build"
project.buildDir = findProperty('altBuildDir') ?: "${buildRoot}/${project['app-name']}"            // allow for an alternate build directory
ext.distDir = "${buildRoot}/dist"
ext.warDir = "${buildDir}/war"
ext['launch.page'] = ext['app-name'] + ".html"

jar.destinationDirectory = file ("$rootDir/jars/build")

ext {

    MAIN_GROUP = "~ Main"
    SUB_GROUP = "~ Sub"
    DEV_GROUP = "~ Development"
    MISC_GROUP = "~ Misc"
    DOCKER_GROUP = "~ Docker"
}

apply from: "${fireflyPath}/buildScript/dependencies.gradle"

/**---------------------------    util functions   ---------------------------------**/


ext.getCommitHash = { workDir="." ->
    try {
        def hashOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--short", "HEAD"
            workingDir = workDir
            standardOutput = hashOut
        }
        return hashOut.toString().trim();
    } catch (Exception e) {
        return 'n/a'
    }
}

ext.getCommitTag = { workDir="." ->
    try {
        def hashOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "tag", "--points-at", "HEAD"
            workingDir = workDir
            standardOutput = hashOut
        }
        return hashOut.toString().trim();
    } catch (Exception e) {
        return 'n/a'
    }
}

ext.getDevCycleTag = { workDir=".", fallback="" ->
    try {
        def hashOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--tags", "--match", "cycle-*", "--abbrev=0"
            workingDir = workDir
            standardOutput = hashOut
        }
        return hashOut.toString().trim();
    } catch (Exception e) {
        return fallback
    }
}

ext.getBranch = { workDir=".", fallback="" ->
    try {
        def hashOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
            workingDir = workDir
            standardOutput = hashOut
        }
        return hashOut.toString().trim();
    } catch (Exception e) {
        return fallback
    }
}

ext.getVersionInfo = { key ->
    if (!project.hasProperty("tag_file")) {
        project.ext.tag_file = "${project.buildDir}/version.tag"
    }
    Properties props = new Properties()
    props.load(new File(tag_file).newDataInputStream())
    def val = props.getProperty(key)
    return val;
}

ext.mergeDevIntoMaster = {  ->

    try {
        "git checkout dev".execute()
        "git pull".execute()
        "git checkout master".execute()
        "git pull master".execute()
        "git merge dev".execute()
    } catch (Exception e) {
        println ">> Unable to merge dev into master"
        throw new GradleException("Unable to merge dev into master", e)
    }
}

ext.InitNode = { workDir ->
    try {
        def process = "yarn version".execute()
    } catch (Exception e) {
        println ">> Task failed due to missing yarn package manager which comes bundled with node.js"
        throw new GradleException("Task failed due to missing yarn package manager which comes bundled with node.js", e)
    }

    if (file("${workDir}/package.json").exists()) {
        exec {
            workingDir = workDir
            executable "yarn"
            args "install", "--ignore-platform", "--frozen-lockfile"
        }
    }
}


/**
 * this function setup node.js environment then run the given command.
 */
ext.NODE = { ...cmd ->
    def wpBuildDir = warDir

    InitNode(rootDir);

    def versionInfo = new Properties()
    def versionFile = file("${project.buildDir}/version.tag")
    if (versionFile.exists()) {
        versionFile.withInputStream { versionInfo.load(it) }
    }

    // any environment starting with '__$' will be defined as global.
    // this is a way send config info to JS code.
    def res = exec {
        environment 'WP_BUILD_DIR': wpBuildDir
        environment 'tomcat_home': project.appConfigProps['tomcat_home']
        environment 'BUILD_ENV': project.env
        commandLine cmd
        for (String key : project.appConfigProps.keySet()) {
            if (key.startsWith('__$')) {
                def rkey = key.replace('__$', 'FF___').replaceAll('\\.', '___')   // some chars are not allowed in Docker's env.  escape, to be resolved later
                environment rkey, project.appConfigProps[key]
                // rintln "<<<<>>  " + rkey + " = " + project.appConfigProps[key]
            }
        }
        // load version info as JS global
        for (String key : versionInfo.keySet()) {
            def rkey = ('__$version.'+key).replace('__$', 'FF___').replaceAll('\\.', '___')   // some chars are not allowed in Docker's env.  escape, to be resolved later
            environment rkey, versionInfo[key]
            // println "<<<<>>  ${rkey} = " + versionInfo[key]
        }
    }
    return res;
}

/**
 * Publish docs to lsst.io
 */
ext.publishDocs = { docsDir, product ->

    def branch = System.env.BRANCH ?: "master"
    docsDir = docsDir ?: "${warDir}/docs"
    product = product ?: "firefly"

    if (!file(docsDir).exists()) {
        println ">> docs directory does not exist.  Skipping publishDocs."
        throw new StopExecutionException("docs directory does not exist.  Skipping publishDocs.")
    }

    try {
        "ltd-mason-travis -h".execute()
    } catch (Exception e) {
        println ">> ltd-mason-travis is not installed.  Task cannot continue."
        throw new GradleException("ltd-mason-travis is not installed.  Task cannot continue.\"", e)
    }

    def res = exec {
        environment 'LTD_MASON_BUILD', 'true'
        environment 'LTD_MASON_PRODUCT', product
        environment 'LTD_MASON_AWS_ID', 'AKIAJRVDEID2GE6GLL7Q'
        environment 'LTD_MASON_AWS_SECRET', project.appConfigProps['LTD_MASON_AWS_SECRET']
        environment 'LTD_KEEPER_URL', 'https://keeper.lsst.codes'
        environment 'LTD_KEEPER_USER', 'firefly'
        environment 'LTD_KEEPER_PASSWORD', project.appConfigProps['LTD_KEEPER_PASSWORD']
        environment 'TRAVIS_PULL_REQUEST', 'false'
        environment 'TRAVIS_REPO_SLUG', 'Caltech-IPAC/firefly'
        environment 'TRAVIS_BRANCH', branch
        commandLine "ltd-mason-travis", "--html-dir", docsDir
    }
    return res
}


/**
 * this function execute the cmd, returns the status code.
 * if failed with exception, then the standardOut and errorOut is returned as the exception messages
 */
ext.doExec = { workDir, ...cmd ->

    if (!file(workDir).exists()) {
        throw new GradleException(cmd + "\n ${workDir} does not exist.")
    }

    def buff = new ByteArrayOutputStream()
    try {
        def res = exec {
            workingDir = workDir
            commandLine cmd
            standardOutput = buff
            errorOutput = buff
        }
        return res;
    } catch (Exception e) {
        throw new GradleException(buff.toString())
    }
}
