
def stopTomcat(remoteHost) {
  def desc = execCmd (remoteHost, true, ["/etc/init.d/tomcat_init", "stop"])
  println ">> Stopping Tomcat:.. $desc"
}

def startTomcat(remoteHost) {
  def cmd = ["/etc/init.d/tomcat_init", "start"];
//  if (project.hasProperty("tomcatDebugStart") && project.tomcatDebugStart == 'true') {
//    cmd = cmd + "jpda"
//  }

  def desc = execCmd (remoteHost, false, cmd)
  println ">> Starting Tomcat:.. $cmd ==> $desc"
}

task deployAllWars(dependsOn: loadConfig) << {
  description= 'Deploy all of the built war files to Tomcat.  Require ${tomcat_home} property.  May include ${remoteHost} as well.'

  if (!project.hasProperty("tomcat_home")) {
    throw ProjectConfigurationException("tomcat_home property is not found.")
  }

  def remoteHost = project.hasProperty("remoteHost") ? remoteHost : null

  // stop tomcat
  stopTomcat(null)
  sleep(1 * 1000)
  if (remoteHost != null) {
    stopTomcat(remoteHost)
  }

  sleep(15 * 1000)

  execCmd(null, true, ["rm", "-r", "$tomcat_home/temp/ehcache"])
  if (remoteHost != null) {
    execCmd(remoteHost, true, ["rm", "-r", "$tomcat_home/temp/ehcache"])
  }

  // copy all of the war files
  def wars = fileTree(dir:"${project.buildDir}/libs", include: '*.war')
  wars.each {File file ->
    copyWar(file, null)
    if (remoteHost != null) {
      copyWar(file, remoteHost)
    }
  }

  // start tomcat
  sleep(1 * 1000)
  startTomcat(null)
  if (remoteHost != null) {
    sleep(1 * 1000)
    startTomcat(remoteHost)
  }

}

def copyWar(file, remoteHost) {
  println ">> copying file: $file"

  def baseName = file.name.tokenize('.')[0]
  execCmd(remoteHost, true, ["rm", "-r","$tomcat_home/webapps/$baseName"])

  if (remoteHost != null) {
    exec {
      executable "scp"
      args "$file"
      args "$remoteHost:/$tomcat_home/webapps/"
    }
  } else {
    copy {
      from("$file")
      into "$tomcat_home/webapps/"
    }
  }
}

def execCmd(remoteHost, ignoreFailure, cmdLine) {
  exec {
    setIgnoreExitValue(ignoreFailure)
    if (remoteHost != null) {
      executable "ssh"
      args "$remoteHost"
      cmdLine.each { arg ->
        if (arg.contains("#")) {
          args arg.replaceAll('\\#', '\\\\#')
        } else {
          args arg
        }
      }
    } else {
      commandLine cmdLine
    }
    logger.info( ">> execCmd: $commandLine" )
  }
}

