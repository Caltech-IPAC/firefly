task gwt {
  outputs.upToDateWhen { false }

  ext.buildDir = "${project.buildDir}"
  ext.warDir = "$buildDir/war"
  ext.modules = "<UNDEFINED>"
  ext.module_name = project.projectDir.name
  ext.startupUrl = "${project['app-name']}.html"
  ext.localWorkers = "6"
  ext.style = "OBFUSCATED"
  ext.maxHeapSize = "1024M"
  ext.debugAddr = "1234"
  ext.linkedDirName = project.projectDir.name
  ext.contextName = linkedDirName
  outputs.dir gwt.buildDir

  doFirst {
    project.ext["launch.page"] = startupUrl.toString()
  }
}

task devMode (dependsOn: loadConfig) {
  description= 'JavaScript Dev Mode'
  group = DEV_GROUP
  outputs.upToDateWhen { false }

  doLast {
    def res = project.ext.NODE 'yarn', 'run', 'dev', "--", "--env.baseWarName=${webapp.baseWarName}", "--env.app-name=${project.ext["app-name"]}"
    if (res.getExitValue() == 0) {
      throw new GradleException("Fail to run dev mode")
    }
  }
}

// this is used by onlinehelp.  don't remove until online help is migrated away from gwt.
task gwtCompile (type: JavaExec, dependsOn: [gwt, loadConfig]) {
  description= 'GWT Compile'
  group = "Build"

  outputs.upToDateWhen { false }
  inputs.file sourceSets.main.java.srcDirs
  inputs.dir sourceSets.main.output.resourcesDir
  outputs.dir gwt.buildDir

// Workaround for incremental build (GRADLE-1483)
  outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()

  main = 'com.google.gwt.dev.Compiler'

  classpath {
    [
            sourceSets.main.java.srcDirs,           // Java source
            sourceSets.main.output.resourcesDir,    // Generated resources
            sourceSets.main.output.classesDir,      // Generated classes
            sourceSets.main.compileClasspath,       // Deps
    ]
  }

  doFirst {
    maxHeapSize = project.hasProperty("gwtMaxHeapSize") ? gwtMaxHeapSize : gwt.maxHeapSize

    if (gwt.modules == "<UNDEFINED>") {
      println ">> No GWT module defined.  Skipping gwtCompile."
      throw new StopExecutionException("No GWT module defined.  Skipping gwtCompile.")
    }

    file(gwt.buildDir).mkdirs()

    def localWorkers = project.hasProperty("gwtLocalWorkers") ?
            project.gwtLocalWorkers : gwt.localWorkers
    def style = project.hasProperty("gwtStyle") ? project.gwtStyle : gwt.style

    systemProperties.put("gwt.persistentunitcachedir", "$gwt.buildDir")
    args "-style", "$style"
    args "-localWorkers", localWorkers
    args "-war", gwt.warDir
    args "-extra", "$gwt.buildDir/extra"
    args "-workDir", "$gwt.buildDir/work"
    args "-logLevel", "INFO"
    args "-generateJsInteropExports"
    if (project.hasProperty("gwtDraftCompile") && project.gwtDraftCompile == 'true') {
      args "-draftCompile"
    }
    if (project.hasProperty("gwtCompileReport") && project.gwtCompileReport == 'true') {
      args "-compileReport"
    }
//    args "-gen", "$gwt.buildDir/gen"
    args gwt.modules
    logger.info (">> gwtCompile options: $args")
  }

  doLast {
    // because we rename it to a shorter name, we need to shuffle these directories around.
    file(gwt.warDir).renameTo("${gwt.warDir}_tmp")
    file("${gwt.warDir}_tmp/$gwt.module_name").renameTo(gwt.warDir)
    file("$gwt.warDir/WEB-INF").mkdirs()
    file("${gwt.warDir}_tmp/WEB-INF/deploy/$gwt.module_name").renameTo("$gwt.warDir/WEB-INF/deploy")
    delete {"${gwt.warDir}_tmp"}
  }
}

