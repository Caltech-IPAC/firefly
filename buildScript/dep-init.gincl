
prepareWebapp {
    doFirst {
        copy {
            from("${fireflyPath}/config/web.xml")
            into "${warDir}/WEB-INF/"
            filter(ReplaceTokens, tokens: project.appConfigProps)
        }
        copy {
            from("${fireflyPath}/config/") {
                include "ehcache.xml"
                include "common.prop"
            }
            into "${warDir}/WEB-INF/config"
            filter(ReplaceTokens, tokens: project.appConfigProps)
        }
        copy {
            from("${fireflyPath}/config/") {
                include "*.properties"
            }
            into "${warDir}/WEB-INF/classes"
            filter(ReplaceTokens, tokens: project.appConfigProps)
        }
    }
}



// make sure node_modules exists.  if it does not, use the one from firefly's

import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.*;

Path target_node_module = Paths.get("${fireflyPath}/node_modules");
if (!Files.exists(target_node_module)) {
    Files.createDirectory(target_node_module);
}

Path node_modules = Paths.get("${rootDir.path}/node_modules");
if (!Files.exists(node_modules)) {
    try {
// creates node_module symlink
        Files.deleteIfExists(node_modules)
        Files.createSymbolicLink(node_modules, target_node_module);
    } catch (Exception ex) {
        System.err.println(ex);
    }
}

Path pjson = Paths.get("${rootDir.path}/package.json");
if (!Files.exists(pjson)) {
    try {
// creates package.json symlink
        Files.deleteIfExists(pjson)
        Path target_pjson = Paths.get("${fireflyPath}/package.json");
        Files.createSymbolicLink(pjson, target_pjson);
    } catch (Exception ex) {
        System.err.println(ex);
    }
}

Path lockf = Paths.get("${rootDir.path}/yarn.lock");
if (!Files.exists(lockf)) {
    try {
// creates yarn.lock symlink
        Files.deleteIfExists(lockf)
        Path target_lockf = Paths.get("${fireflyPath}/yarn.lock");
        Files.createSymbolicLink(lockf, target_lockf);
    } catch (Exception ex) {
        System.err.println(ex);
    }
}

Path test_config = Paths.get("${rootDir.path}/config/test");
if (!Files.exists(test_config)) {
    try {
// creates config/test symlink
        Files.deleteIfExists(test_config)
        Files.createSymbolicLink(test_config, Paths.get("${fireflyPath}/config/test"));
    } catch (Exception ex) {
        System.err.println(ex);
    }
}

Path jest = Paths.get("${rootDir.path}/__jest__");
if (!Files.exists(jest)) {
    try {
// creates __jest__ symlink
        Files.deleteIfExists(jest)
        Path target_jest = Paths.get("${fireflyPath}/__jest__");
        Files.createSymbolicLink(jest, target_jest);
    } catch (Exception ex) {
        System.err.println(ex);
    }
}

clean {
    delete "${rootDir.path}/__jest__"
    delete "${rootDir.path}/config/test"
    delete "${rootDir.path}/yarn.lock"
    delete "${rootDir.path}/package.json"
    delete "${rootDir.path}/node_modules"
}