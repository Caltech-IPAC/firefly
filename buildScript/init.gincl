
project.ext["env"] = project.hasProperty("env") ? project.ext["env"] : 'local'
println ">> Environment is set to $env"


def loadConfig() {
    // set all props in bulid.config to be project's properties
    def cs = new ConfigSlurper(project.env).parse(new File("$rootDir/buildScript/build.config").toURL())
    logger.info ">> add properties from $rootDir/buildScript/build.config"
    cs.toProperties().each{ k, v ->
      logger.info ">>    $k : $v"
      project.ext.set(k, v)
    }

    if (file("$gradle.gradleUserHomeDir/build.config").exists()) {
      cs = new ConfigSlurper(project.env).parse(new File("$gradle.gradleUserHomeDir/build.config").toURL())
      logger.info ">> add properties from $gradle.gradleUserHomeDir/build.config"
      cs.toProperties().each{ k, v ->
        logger.info ">>      $k : $v"
        project.ext.set(k, v)
      }
    }
//  project.ext.properties.each{ k, v -> println "${k}:${v}" }
}


task deployAllWars << {
  description= 'Deploy all of the built war files to Tomcat.  Require ${tomcat_home} property.  May include ${remoteHost} as well.'

  loadConfig()

  if (!project.hasProperty("tomcat_home")) {
    throw ProjectConfigurationException("tomcat_home property is not found.")
  }

  def remoteHost = project.hasProperty("remoteHost") ? remoteHost : null

  def wait = 4
          // stop tomcat
  stopTomcat(null)
  if (remoteHost != null) {
    stopTomcat(remoteHost)
    wait = 10
  }

  sleep(wait * 1000)

  // copy all of the war files
  def wars = fileTree(dir:"${project.buildDir}/libs", include: '*.war')
  wars.each {File file ->
    copyWar(file, null)
    if (remoteHost != null) {
      copyWar(file, remoteHost)
    }
  }

  // start tomcat
  startTomcat(null)
  if (remoteHost != null) {
    startTomcat(remoteHost)
  }

}

def copyWar(file, remoteHost) {
  println ">> copying file: $file"

  def baseName = file.name.tokenize('.')[0]
  if (remoteHost != null) {
    exec {
      def baseNameStr = baseName.replaceAll("#", "\\#")
      ignoreExitValue = 'true'
      executable "ssh"
      args "$remoteHost"
      args "rm -r $tomcat_home/webapps/$baseNameStr"
    }
    exec {
      executable "scp"
      args "$file"
      args "$remoteHost:/$tomcat_home/webapps/"
    }
  } else {
    delete("$tomcat_home/webapps/$baseName")
    copy {
      from("$file")
      into "$tomcat_home/webapps/"
    }
  }
}


def stopTomcat(remoteHost) {
  def host = remoteHost != null ? remoteHost : "local"
  exec {
    if (remoteHost != null) {
      executable "ssh"
      args "$remoteHost"
      args "$tomcat_home/bin/shutdown.sh"
    } else {
      executable "$tomcat_home/bin/shutdown.sh"
    }
    ignoreExitValue = 'true'
    println ">> Stopping Tomcat:.. $host: $tomcat_home"
    errorOutput = new ByteArrayOutputStream()
  }
}

def startTomcat(remoteHost) {
  def host = remoteHost != null ? remoteHost : "local"
  exec {
    if (remoteHost != null) {
      executable "ssh"
      args "$remoteHost"
      args "$tomcat_home/bin/catalina.sh"
    } else {
      executable "$tomcat_home/bin/catalina.sh"
    }
    if (project.hasProperty("tomcatDebugStart") && project.tomcatDebugStart == 'true') {
      args 'jpda'
    }
    args 'start'
    println ">> Starting Tomcat:.. $host: $tomcat_home"
  }
}
