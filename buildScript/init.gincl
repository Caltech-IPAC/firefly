def INIT_GROUP = "Common initial setup for all gradle build."

project.ext["app-name"] = name


task loadConfig {
  description= 'Load build and app config files.  Also, setup common properties like build_date, build_time, etc.'
  group = INIT_GROUP

  project.ext.build_time = new Date().toString()
  project.ext.build_date = new Date().format("yyyy-MM-dd")

  doLast {
    project.ext["env"] = project.hasProperty("env") ? project.env : "local"
    println ">> Environment is set to $project.env"

    ConfigRepo configRepo = new ConfigRepo();

    if (file("$rootDir/config/app.config").exists()) {
      configRepo.merge(ConfigRepo.parse(project.env, file("$rootDir/config/app.config")))
    }

    if (project.hasProperty("appConfig")) {
      configRepo.merge(ConfigRepo.parse(project.env, project.appConfig))
    }

    if (file("$rootDir/buildScript/build.config").exists()) {
      configRepo.merge(ConfigRepo.parse(project.env, file("$rootDir/buildScript/build.config")))
    }

    project.ext.appConfigProps = configRepo.flatten();
//    appConfigProps.each{ k, v -> println "${k} => ${v}" }

    if (file("$gradle.gradleUserHomeDir/build.config").exists()) {
      logger.info ">> loading user's build.config for env: $project.env"
      def overrides = ConfigRepo.parse(project.env, file("$gradle.gradleUserHomeDir/build.config")).flatten()
      appConfigProps.putAll(overrides)
    }
    appConfigProps.putAll(project.ext.properties)
    appConfigProps.putAll(System.properties)

//    appConfigProps.each{ k, v -> println "${k} => ${v}" }

  }
}

task createVersionTag  {
  dependsOn loadConfig

  doLast {
    // generate version tag
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def type = appConfigProps.get('BuildType')
    def buildNum = appConfigProps.get('BuildNumber')

    def tag = "$major.$minor.${rev}_${type}-$buildNum"
    def props = new Properties();
    file(project.buildDir).mkdirs()
    props.setProperty('tag', tag)
    props.store(file("${project.buildDir}/version.tag").newWriter(), "Version Info")
  }
}

/**
 * this is used by loadConfig to extract the information from a script into a properties object.
 */
class ClosureScript extends groovy.lang.Script {
  Closure closure
  def run() {
    closure.resolveStrategy = Closure.DELEGATE_FIRST
    closure.delegate = this
    closure.call()
  }
}

class ConfigRepo {
  def baseConf
  def envConf

  ConfigRepo() {
    baseConf = new Properties()
    envConf = new Properties()
  }

  ConfigRepo(baseConf, envConf) {
    this.baseConf = baseConf
    this.envConf = envConf
  }

  public static final ConfigRepo parse(env, source) {
    source = source instanceof File ? source.toURL() : source instanceof Closure ? new ClosureScript(closure: source) : source
    def baseConf = new ConfigSlurper().parse(source).toProperties()
    def envConf =  new ConfigSlurper(env).parse(source).toProperties()

    baseConf.each{ k, v ->
      if (envConf.get(k).equals(v)) {
        envConf.remove(k)
      }
    }
    return new ConfigRepo(baseConf, envConf)
  }

  public Properties flatten() {
    def props = new Properties()
    props.putAll(baseConf)
    props.putAll(envConf)
    return props
  }

  public void merge(configRepo) {
    baseConf.putAll(configRepo.baseConf)
    envConf.putAll(configRepo.envConf)
  }

}