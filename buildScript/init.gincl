def INIT_GROUP = "Common initial setup for all gradle build."

project.ext["app-name"] = name
buildRoot = "$rootDir/build"
buildDir = "$rootDir/build/${project.ext["app-name"]}"


task loadConfig {
  description= 'Load build and app config files.  Also, setup common properties like build_date, build_time, etc.'
  group = INIT_GROUP

  project.ext.build_time = new Date().toString()
  project.ext.build_date = new Date().format("yyyy-MM-dd")

  doLast {
    project.ext["env"] = project.hasProperty("env") ? project.env : "local"
    println ">> Environment is set to $project.env"

    ConfigRepo configRepo = new ConfigRepo();

    if (file("$rootDir/config/app.config").exists()) {
      configRepo.merge(ConfigRepo.parse(project.env, file("$rootDir/config/app.config")))
    }

    if (project.hasProperty("appConfig")) {
      configRepo.merge(ConfigRepo.parse(project.env, project.appConfig))
    }

    project.ext.appConfigProps = configRepo.flatten();
//    appConfigProps.each{ k, v -> println "${k} => ${v}" }

    if (file("$rootDir/buildScript/build.config").exists()) {
      def buildProps = ConfigRepo.parse(project.env, file("$rootDir/buildScript/build.config")).flatten()
      buildProps.each { k, v -> project.ext.set(k,v)}
    }

    if (file("$gradle.gradleUserHomeDir/build.config").exists()) {
      logger.info ">> loading user's build.config for env: $project.env"
      def overrides = ConfigRepo.parse(project.env, file("$gradle.gradleUserHomeDir/build.config")).flatten()
      overrides.each { k, v -> project.ext.set(k,v)}
    }
    appConfigProps.putAll(project.ext.properties)
    appConfigProps.putAll(System.properties)
//    appConfigProps.each{ k, v -> println "${k} => ${v}" }

  }
}

task createVersionTag  {
  dependsOn loadConfig

  doLast {
    // generate version tag
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def type = appConfigProps.get('BuildType')
    def buildNum = appConfigProps.get('BuildNumber')

    def tag = "$major.$minor.${rev}_${type}-$buildNum"
    def props = new Properties();
    file(project.buildDir).mkdirs()
    props.setProperty('tag', tag)
    props.store(file("${project.buildDir}/version.tag").newWriter(), "Version Info")
  }
}

task createTag(dependsOn: loadConfig) << {
  description = 'Create and push a tag to remote repo. Optional properties: ${tag_name}, ${tag_file} if ${tag_name} is missing. defaults to build/version.tag, ${tag_remote} defaults to origin, ${tag_message}.'

  def tag_label = project.ext.createTagLabel();
  println "tag: $tag_label"

  exec {
    executable 'git'
    args 'tag'
    args '-a'
    args tag_label
    args '-m'
    if (project.hasProperty("tag_message")) {
      args tag_message
    } else {
      args 'not given'
    }
  }

  exec {
    executable 'git'
    args 'push'
    if (project.hasProperty("tag_remote")) {
      args tag_remote
    } else {
      args 'origin'
    }
    args tag_label
  }
}

/**
 * this is used by loadConfig to extract the information from a script into a properties object.
 */
class ClosureScript extends groovy.lang.Script {
  Closure closure
  def run() {
    closure.resolveStrategy = Closure.DELEGATE_FIRST
    closure.delegate = this
    closure.call()
  }
}

class ConfigRepo {
  def baseConf
  def envConf

  ConfigRepo() {
    baseConf = new Properties()
    envConf = new Properties()
  }

  ConfigRepo(baseConf, envConf) {
    this.baseConf = baseConf
    this.envConf = envConf
  }

  public static final ConfigRepo parse(env, source) {
    source = source instanceof File ? source.toURL() : source instanceof Closure ? new ClosureScript(closure: source) : source
    def baseConf = new ConfigSlurper().parse(source).toProperties()
    def envConf =  new ConfigSlurper(env).parse(source).toProperties()

    baseConf.each{ k, v ->
      if (envConf.get(k).equals(v)) {
        envConf.remove(k)
      }
    }
    return new ConfigRepo(baseConf, envConf)
  }

  public Properties flatten() {
    def props = new Properties()
    props.putAll(baseConf)
    props.putAll(envConf)
    return props
  }

  public void merge(configRepo) {
    baseConf.putAll(configRepo.baseConf)
    envConf.putAll(configRepo.envConf)
  }

}

ext.createTagLabel = {  ->
  if (!project.hasProperty("tag_name")) {
    if (!project.hasProperty("tag_file")) {
      project.ext.tag_file = "${project.buildDir}/version.tag"
    }
    Properties props = new Properties()
    props.load(new File(tag_file).newDataInputStream())
    project.ext.tag_name = props.getProperty('tag')
  }

  def prefix = project.hasProperty("tag_prefix") ? "${tag_prefix}_" : ""
  def suffix = project.hasProperty("tag_suffix") ? "_${tag_suffix}" : ""
  def tag_label = prefix + tag_name + suffix
  return tag_label;
}

ext.mergeDevIntoMaster = {  ->

  try {
    "git checkout dev".execute()
    "git pull".execute()
    "git checkout master".execute()
    "git pull master".execute()
    "git merge dev".execute()
  } catch (Exception e) {
    println ">> Unable to merge dev into master"
    throw new GradleException("Unable to merge dev into master", e)
  }
}

