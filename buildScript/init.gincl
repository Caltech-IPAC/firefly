def INIT_GROUP = "Common initial setup for all gradle build."

project.ext["app-name"] = name


task loadConfig {
  description= 'Load build and app config files.  Also, setup common properties like build_date, build_time, etc.'
  group = INIT_GROUP

  project.ext.build_time = new Date().toString()
  project.ext.build_date = new Date().format("yyyy-MM-dd")

  doLast {
    if (!project.hasProperty("appConfigProps")) {

      project.ext["env"] = project.hasProperty("env") ? project.env : 'local'
      println ">> Environment is set to $env"

      project.ext.appConfigProps = new Properties()

      if (file("$rootDir/config/app.config").exists()) {
        def cs = new ConfigSlurper(project.env).parse(new File("$rootDir/config/app.config").toURL())
        appConfigProps.putAll(cs.toProperties())
      }

      if (project.hasProperty("appConfig")) {
        def cs = new ConfigSlurper(project.env).parse(new ClosureScript(closure: project.appConfig))
        appConfigProps.putAll(cs.toProperties())
        logger.info(">> script's appConfig added")
      }

      logger.info ">> loading build.config for env: $project.env"
      loadConfFile(project.env, "$rootDir/buildScript/build.config")
      loadConfFile(project.env, "$gradle.gradleUserHomeDir/build.config")
//  project.ext.properties.each{ k, v -> println "${k}:${v}" }

      appConfigProps.putAll(project.ext.properties)
      appConfigProps.putAll(System.properties)
//    appConfigProps.each{ k, v -> println "${k} => ${v}" }

    }
  }
}

task createVersionTag  {
  dependsOn loadConfig

  doLast {
    // generate version tag
    def major = appConfigProps.get('BuildMajor')
    def minor = appConfigProps.get('BuildMinor')
    def rev = appConfigProps.get('BuildRev')
    def type = appConfigProps.get('BuildType')
    def buildNum = appConfigProps.get('BuildNumber')

    def tag = "$major.$minor.${rev}_${type}-$buildNum"
    def props = new Properties();
    file(project.buildDir).mkdirs()
    props.setProperty('tag', tag)
    props.store(file("${project.buildDir}/version.tag").newWriter(), "Version Info")
  }
}

/**
 * this is used by loadConfig to extra the information from a script into a properties object.
 */
class ClosureScript extends groovy.lang.Script {
  Closure closure
  def run() {
    closure.resolveStrategy = Closure.DELEGATE_FIRST
    closure.delegate = this
    closure.call()
  }
}

def loadConfFile(env, cfile) {
  if (file("$rootDir/buildScript/build.config").exists()) {
    def cs = new ConfigSlurper(env).parse(new File(cfile).toURL())
    logger.info ">> add properties from $cfile"
    cs.toProperties().each { k, v ->
      logger.info ">>    $k : $v"
      project.ext.set(k, v)
    }
  }
}


