import java.nio.file.*;
import org.apache.tools.ant.taskdefs.condition.Os


ext.firefly_onlinehelp_dir = "$fireflyPath/src/onlinehelp/"

apply plugin: "java"
apply from: "$fireflyPath/buildScript/global.gincl"
apply from: "$fireflyPath/buildScript/tasks.gincl"

// make sure public/share exists.  if it does not, use the one from firefly's
Path share = Paths.get("${projectDir}/public/share/");
if (!Files.exists(share)) {
    Files.createSymbolicLink(share, Paths.get("${firefly_onlinehelp_dir}/public/share/"))       // creates symlink
}



ext.firefly_loader = 'firefly_loader.js?v' + System.currentTimeMillis()

task generatePdf (type: Exec) {
    description= 'Generate PDF'

    executable "htmldoc"

    doFirst{

        try {
            "$executable --version".execute()
        } catch (Exception e) {
            println ">> HTMLDoc is not installed.  Skipping pdf generation."
            throw new StopExecutionException(">> HTMLDoc is not installed.  Skipping pdf generation.")
        }
        workingDir = buildDir

        def pdfFile = 'help.pdf'
        if (pdfFile == null) {
            throw ProjectConfigurationException("pdfFile property is not found.")
        }
        String inputs = new File("$buildDir/.pdf-input").text.trim()
        args "--left", ".7in", "--right", ".7in", "--linkcolor", "blue", "--webpage", "-f", "$buildDir/$pdfFile", "--titleimage"
        args inputs.split()

        logger.info ">> generatePdf: $commandLine"
    }
}



task copyHtml (dependsOn: loadConfig) {

    doLast {
        copy {
            from "public"
            into buildDir
        }

        copy {
            from"public/index.html"
            into buildDir

            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.appConfigProps)
        }

    }
}

task zipHelp(type: Zip) {
    baseName = "${project.property("app-name")}_help"
    destinationDir = file("$buildRoot/dist")
    from("$buildDir") {
        exclude "war"
    }
    into project.property("app-name")
}



task build(overwrite: true, dependsOn: [buildClient, copyHtml, generatePdf, zipHelp])

task run(dependsOn: build) {
    doLast {

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            "cmd /c start ${buildDir}/index.html".execute()
        } else {
            "open ${buildDir}/index.html".execute()
        }
    }
}

task install(dependsOn: build) {
    description= 'Sub project level.  Deploy onlinehelp onto a web server.  Requires property or environment CM_BASE_APP_DIR to be set.  Made for IRSA env.'
    group = MAIN_GROUP

    doFirst {
        def irsaDir = appConfigProps.get("CM_BASE_APP_DIR")
        if (irsaDir == null) {
            irsaDir = System.getenv('CM_BASE_APP_DIR')
        }
        if (irsaDir == null) {
            throw ProjectConfigurationException("CM_BASE_APP_DIR is not set.  install aborted.")
        }
        if (!file("$irsaDir/web/html/").exists()) {
            throw ProjectConfigurationException("$irsaDir/web/html/ not found.  install aborted.")
        }
        def outputDir = file("$irsaDir/web/html/onlinehelp")
        mkdir(outputDir)
        def zips = fileTree(dir: "${project.buildRoot}/dist", include: '*.zip')
        zips.each { File zipFile ->
            copy {
                from zipTree(zipFile)
                into outputDir
            }
        }
    }
}

buildClient () {
    outputs.upToDateWhen { false }
    doFirst {
        project.InitNode(fireflyPath)
    }
}

